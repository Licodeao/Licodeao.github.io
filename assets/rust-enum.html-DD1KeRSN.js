import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, d as createVNode, e as withCtx, b as createTextVNode, a as createBaseVNode, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><p>枚举（enums），允许你通过列举可能的成员（variants）来定义一个类型。枚举是一个单独的类型。</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>结构体能够将字段和数据结合在一起，枚举给予你将一个值成为集合之一的方法。</p><p>通过 <code>enum</code> 关键字来定义枚举，语法和 TypeScript 定义枚举一样：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">NumberType</span> <span class="token punctuation">{</span>\n  <span class="token class-name">OneHundred</span><span class="token punctuation">,</span>\n  <span class="token class-name">TwoHundreds</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>OneHundred</code>、<code>TwoHundreds</code> 被称为枚举的成员（variants）。</p><h3 id="枚举值" tabindex="-1"><a class="header-anchor" href="#枚举值" aria-hidden="true">#</a> 枚举值</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> one_hundred <span class="token operator">=</span> <span class="token class-name">NumberType</span><span class="token punctuation">::</span><span class="token class-name">OneHundred</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> two_hundreds <span class="token operator">=</span> <span class="token class-name">NumberType</span><span class="token punctuation">::</span><span class="token class-name">TwoHundreds</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>', 9);
const _hoisted_10 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">enum</span> <span class="token type-definition class-name">NumberType</span> <span class="token punctuation">{</span>\n  <span class="token class-name">OneHundred</span><span class="token punctuation">(</span><span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token class-name">TwoHundreds</span><span class="token punctuation">(</span><span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> one_hundred <span class="token operator">=</span> <span class="token class-name">NumberType</span><span class="token punctuation">::</span><span class="token class-name">OneHundred</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> two_hundreds <span class="token operator">=</span> <span class="token class-name">NumberType</span><span class="token punctuation">::</span><span class="token class-name">TwoHundreds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;one_hundred: {:?}, two_hundreds: {:?}&quot;</span><span class="token punctuation">,</span> one_hundred<span class="token punctuation">,</span> two_hundreds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样每一个我们定义的枚举成员的名字都变成了一个构建枚举实例的函数。</p><p>相比于结构体，枚举的另一个优势就是：每个成员可以处理不同类型和不同数量的数据。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">NumberType</span> <span class="token punctuation">{</span>\n  <span class="token class-name">OneHundred</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token class-name">TwoHundreds</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> one_hundred <span class="token operator">=</span> <span class="token class-name">NumberType</span><span class="token punctuation">::</span><span class="token class-name">OneHundred</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> two_hundreds <span class="token operator">=</span> <span class="token class-name">NumberType</span><span class="token punctuation">::</span><span class="token class-name">TwoHundreds</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>枚举成员不仅可以关联数字、字符串，还可以关联结构体，甚至于另一个枚举！总之，可以将任意类型的数据放入枚举成员中！</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 结构体</span>\n<span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">OneHundredStruct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">TwoHundredsStruct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 枚举成员关联结构体</span>\n<span class="token attribute attr-name">#[allow(unused)]</span>\n<span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">enum</span> <span class="token type-definition class-name">NumberType</span> <span class="token punctuation">{</span>\n  <span class="token class-name">OneHundred</span><span class="token punctuation">(</span><span class="token class-name">OneHundredStruct</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token class-name">TwoHundreds</span><span class="token punctuation">(</span><span class="token class-name">TwoHundredsStruct</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> one_hundred_struct <span class="token operator">=</span> <span class="token class-name">OneHundredStruct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> two_hundreds_struct <span class="token operator">=</span> <span class="token class-name">TwoHundredsStruct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">let</span> one_hundred <span class="token operator">=</span> <span class="token class-name">NumberType</span><span class="token punctuation">::</span><span class="token class-name">OneHundred</span><span class="token punctuation">(</span>one_hundred_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> two_hundreds <span class="token operator">=</span> <span class="token class-name">NumberType</span><span class="token punctuation">::</span><span class="token class-name">TwoHundreds</span><span class="token punctuation">(</span>two_hundreds_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;one_hundred: {:?}, two_hundreds: {:?}&quot;</span><span class="token punctuation">,</span> one_hundred<span class="token punctuation">,</span> two_hundreds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与结构体一样，也可以使用 <code>impl</code> 关键字在枚举上定义方法。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">enum</span> <span class="token type-definition class-name">NumberType</span> <span class="token punctuation">{</span>\n    <span class="token class-name">OneHundred</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">TwoHundreds</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token punctuation">}</span>\n  \n  <span class="token comment">// 在枚举上定义方法</span>\n  <span class="token keyword">impl</span> <span class="token class-name">NumberType</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     	<span class="token punctuation">...</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">NumberType</span><span class="token punctuation">::</span><span class="token class-name">OneHundred</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Get&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="option-枚举" tabindex="-1"><a class="header-anchor" href="#option-枚举" aria-hidden="true">#</a> Option 枚举</h3>', 9);
const _hoisted_19 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "Option<T>",
  -1
  /* HOISTED */
);
const _hoisted_20 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span> <span class="token comment">// 告诉 lint 可以允许未使用的变量存在，不要出警告</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">None</span><span class="token punctuation">,</span>\n    <span class="token class-name">OneHundred</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标准库中的 <code>Option</code></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">/// No value.</span>\n    <span class="token attribute attr-name">#[lang = <span class="token string">&quot;None&quot;</span>]</span>\n    <span class="token attribute attr-name">#[stable(feature = <span class="token string">&quot;rust1&quot;</span>, since = <span class="token string">&quot;1.0.0&quot;</span>)]</span>\n    <span class="token class-name">None</span><span class="token punctuation">,</span>\n    <span class="token comment">/// Some value of type `T`.</span>\n    <span class="token attribute attr-name">#[lang = <span class="token string">&quot;Some&quot;</span>]</span>\n    <span class="token attribute attr-name">#[stable(feature = <span class="token string">&quot;rust1&quot;</span>, since = <span class="token string">&quot;1.0.0&quot;</span>)]</span>\n    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token attribute attr-name">#[stable(feature = <span class="token string">&quot;rust1&quot;</span>, since = <span class="token string">&quot;1.0.0&quot;</span>)]</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>None</code> 可以已经在标准库中定义了，所以直接不需要枚举前缀 <code>Option::</code> 就可以使用它了。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">None</span><span class="token punctuation">,</span>\n    <span class="token class-name">OneHundred</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">let</span> one_hundred <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span> <span class="token comment">// 但是这里有问题</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会出现这个错误提示：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240113112025650.png" alt="image-20240113112025650"></p><p>这告诉我们需要为 <code>one_hundred</code> 变量显式地添加一个类型注解！给 <code>one_hundred</code> 变量添加一个类型</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">None</span><span class="token punctuation">,</span>\n    <span class="token class-name">OneHundred</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">let</span> one_hundred<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是依然会报错：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240113135007506.png" alt="image-20240113135007506"></p><p>这个错误告诉我们标准库中的 <code>Option</code> 和 主程序中的 <code>Option</code> 产生了冲突！</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> one_hundred<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>去掉主程序中的 <code>Option</code> 枚举就可以了。这说明了直接使用 <code>None</code> 时，它来自标准库，在当前作用域中不能再实现 <code>Option</code> 枚举了！</p><p>当 <code>Option</code> 类型和其他类型进行运算时：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n  \n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;sum: {:?}&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会出现以下提示和错误：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240113141512587.png" alt="image-20240113141512587"></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>  <span class="token operator">|</span>\n<span class="token number">5</span> <span class="token operator">|</span>   <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n  <span class="token operator">|</span>               <span class="token operator">^</span> no implementation <span class="token keyword">for</span> `<span class="token keyword">i32</span> <span class="token operator">+</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span>`\n  <span class="token operator">|</span>\n  <span class="token operator">=</span> help<span class="token punctuation">:</span> the <span class="token keyword">trait</span> `<span class="token class-name">Add</span><span class="token operator">&lt;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span>` is not implemented <span class="token keyword">for</span> `<span class="token keyword">i32</span>`\n  <span class="token operator">=</span> help<span class="token punctuation">:</span> the following other types implement <span class="token keyword">trait</span> `<span class="token class-name">Add</span><span class="token operator">&lt;</span><span class="token class-name">Rhs</span><span class="token operator">&gt;</span>`<span class="token punctuation">:</span>\n            <span class="token operator">&lt;</span><span class="token keyword">i32</span> <span class="token keyword">as</span> <span class="token class-name">Add</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span><span class="token keyword">i32</span> <span class="token keyword">as</span> <span class="token class-name">Add</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">i32</span> <span class="token keyword">as</span> <span class="token class-name">Add</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">i32</span> <span class="token keyword">as</span> <span class="token class-name">Add</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>诚然，类型不同的值必然不能相加。一个类型为 <code>i32</code> 的值，Rust 编译器确保它总是有效的，无需做空值检查。</p><p>只有当使用了 <code>Option&lt;T&gt;</code> 类型时，可能会出现空值的情况，因为在标准库 <code>Option&lt;T&gt;</code> 存在着 <code>None</code> 值。</p><p>只要一个值不是 <code>Option&lt;T&gt;</code> 类型时，就可以安全地认为它的值不为空。</p>', 22);
function _sfc_render(_ctx, _cache) {
  const _component_font = resolveComponent("font");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("在定义枚举时，可以让枚举成员关联某个数据类型")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("，这样就不需要额外的结构体了："),
    _hoisted_10,
    createBaseVNode("p", null, [
      createTextVNode("Option 枚举广泛应用于"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("一个值要么有值要么没值")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("的场景。"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("空值（Null）是一个值，它代表没有值，在 Rust 中并没有空值")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    createBaseVNode("p", null, [
      createTextVNode("在 Rust 中虽然没有空值，但是"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("可以拥有一个可以编码存在或不存在的枚举")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("！这个枚举就是 "),
      _hoisted_19
    ]),
    _hoisted_20
  ]);
}
const rustEnum_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "rust-enum.html.vue"]]);
export {
  rustEnum_html as default
};
