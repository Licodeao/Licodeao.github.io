import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, e as withCtx, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode(
  "h2",
  {
    id: "trait",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#trait",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" Trait")
  ],
  -1
  /* HOISTED */
);
const _hoisted_2 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "trait",
  -1
  /* HOISTED */
);
const _hoisted_3 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "trait",
  -1
  /* HOISTED */
);
const _hoisted_4 = /* @__PURE__ */ createBaseVNode(
  "h3",
  {
    id: "定义-trait",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#定义-trait",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 定义 "),
    /* @__PURE__ */ createBaseVNode("code", null, "trait")
  ],
  -1
  /* HOISTED */
);
const _hoisted_5 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "trait",
  -1
  /* HOISTED */
);
const _hoisted_6 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用 <code>trait</code> 关键字来声明一个 <code>trait</code> ，后面跟着的是 <code>trait</code> 的名字，同样可以设置 <code>trait</code> 是否公有。</p>', 2);
const _hoisted_8 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "trait",
  -1
  /* HOISTED */
);
const _hoisted_9 = /* @__PURE__ */ createStaticVNode('<p><code>trait</code> 中可以有多个方法签名，一行一个方法签名且都以分号结尾。</p><h3 id="实现-trait" tabindex="-1"><a class="header-anchor" href="#实现-trait" aria-hidden="true">#</a> 实现 <code>trait</code></h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">NormalInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">impl</span> <span class="token class-name">GetInfo</span> <span class="token keyword">for</span> <span class="token class-name">NormalInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>\n      <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;title: {}, content: {}, author: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">AmazingInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> reason<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> is_important<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">impl</span> <span class="token class-name">GetInfo</span> <span class="token keyword">for</span> <span class="token class-name">AmazingInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>\n      <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;title: {}, reason: {}, author: {}, is_important: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>reason<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>is_important<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>impl</code> 关键字后跟着的是需要实现 <code>trait</code> 的名称，<code>for</code> 后跟着的是需要实现 <code>trait</code> 的类型的名称，也即在某个类型上实现某个 <code>trait</code>。</p><h3 id="默认实现" tabindex="-1"><a class="header-anchor" href="#默认实现" aria-hidden="true">#</a> 默认实现</h3><p>可以为 <code>trait</code> 中的某些或全部方法提供默认的行为。这样当为某个特定类型实现 <code>trait</code> 时，可以选择保留或重载每个方法的默认行为。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Trait&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里给 <code>GetInfo trait</code> 的 <code>value</code> 方法提供了一个默认的字符串值，而不只是定义方法签名了。</p><blockquote><p>如何使用默认实现？</p></blockquote><p>通过指定一个空的 <code>impl</code> 块即可。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 默认实现</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Trait&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">NormalInfo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">pub</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n  <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n  <span class="token keyword">pub</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用默认实现</span>\n<span class="token keyword">impl</span> <span class="token class-name">GetInfo</span> <span class="token keyword">for</span> <span class="token class-name">NormalInfo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>impl GetInfo for NormalInfo {}</code> 指定了一个空的 <code>impl</code> 块，以此使用默认实现。</p><p>使用了默认实现，并不代表将原来的 <code>trait</code> 方法签名给覆盖掉了，而是实例依然能够使用方法签名。</p>', 13);
const _hoisted_22 = /* @__PURE__ */ createStaticVNode('<h3 id="trait-作为参数" tabindex="-1"><a class="header-anchor" href="#trait-作为参数" aria-hidden="true">#</a> <code>trait</code> 作为参数</h3><p>使用 <code>trait</code> 来接受多种不同类型的参数。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">console</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">impl</span> <span class="token class-name">GetInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数 <code>item</code> 指定了 <code>impl</code> 关键字和 <code>GetInfo trait</code> ，该参数支持任何实现了指定 <code>trait</code> 的类型。在 <code>console</code> 函数体中，可以调用任何来自 <code>GetInfo trait</code> 的方法。</p><h3 id="trait-bound" tabindex="-1"><a class="header-anchor" href="#trait-bound" aria-hidden="true">#</a> <code>Trait Bound</code></h3><p><code>trait bound</code> 实际上是一种较长形式的语法糖。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// trait bound</span>\n  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">console</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">GetInfo</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n		<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 7);
const _hoisted_29 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "trait bound",
  -1
  /* HOISTED */
);
const _hoisted_30 = /* @__PURE__ */ createStaticVNode('<p>与 <code>impl Trait</code> 相比，<code>trait bound</code> 更适合用于复杂的场景，而 <code>impl Trait</code> 适用于短小的场景：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token comment">// impl trait 语法</span>\n	<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">console</span><span class="token punctuation">(</span>item1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">impl</span> <span class="token class-name">GetInfo</span><span class="token punctuation">,</span> item2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">impl</span> <span class="token class-name">GetInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;item1: {}, item2: {}&quot;</span><span class="token punctuation">,</span> item1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item2<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token comment">// trait bound 语法</span>\n  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">console2</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">GetInfo</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> item2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;item1: {}, item2: {}&quot;</span><span class="token punctuation">,</span> item1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item2<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码中可以看出，<code>impl Trait</code> 语法在函数参数的角度来说，确实是更长一点，并且 <code>item1</code> 和 <code>item2</code> 允许是不同类型的情况，只要它们都实现了 <code>GetInfo</code> 。而 <code>trait bound</code> 语法在函数参数的角度则更短一点，并且 <code>item1</code> 和 <code>item2</code> 是相同的类型。</p><blockquote><p>通过 <code>+</code> 指定多个 <code>trait bound</code></p></blockquote><p><code>+</code> 也可以适用于 <code>impl Trait</code> 语法。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetMessage</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">console</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">impl</span> <span class="token class-name">GetInfo</span> <span class="token operator">+</span> <span class="token class-name">GetMessage</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Value: {}, Message: {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>+</code> 指定多个 <code>trait bound</code></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetMessage</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">console</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">GetInfo</span> <span class="token operator">+</span> <span class="token class-name">GetMessage</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Value: {}, Message: {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看着还是很清晰的～</p><p>由于 <code>trait bound</code> 是一种较长形式的语法糖，所以当过多的 <code>trait bound</code> 也有缺点，每个泛型有自己的 <code>trait bound</code> ，所以有多个泛型参数的函数在函数名称和参数列表之间会有很长的 <code>trait bound</code> 信息，这导致函数签名难以阅读。于是，Rust 给出了一个解决办法——使用 <code>where</code> 简化过多的 <code>trait bound</code></p><blockquote><p>使用 <code>where</code> 简化 <code>trait bound</code></p></blockquote><p>未使用 <code>where</code> 简化前：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetMessage</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetResult</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">result</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n	<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">console</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">GetInfo</span> <span class="token operator">+</span> <span class="token class-name">GetMessage</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">:</span> <span class="token class-name">GetMessage</span> <span class="token operator">+</span> <span class="token class-name">GetResult</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Value: {}, Message: {}, Result: {}&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>trait bound</code> 非常长，这还是只有 3 个 <code>trait</code> 的时候...</p><p>使用 <code>where</code> 简化 <code>trait bound</code>：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetMessage</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetResult</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">result</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token comment">// 使用 where 简化 trait bound</span>\n	<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">console</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">E</span><span class="token punctuation">)</span>\n  <span class="token keyword">where</span>\n    <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">GetInfo</span> <span class="token operator">+</span> <span class="token class-name">GetMessage</span><span class="token punctuation">,</span>\n    <span class="token class-name">E</span><span class="token punctuation">:</span> <span class="token class-name">GetMessage</span> <span class="token operator">+</span> <span class="token class-name">GetResult</span><span class="token punctuation">,</span> \n  <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Value: {}, Message: {}, Result: {}&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来好像复杂了，其实也还好，但是使用 <code>where</code> 简化 <code>trait bound</code> 确实达到了目的，确实解决了之前提到的问题。</p><h3 id="返回实现了-trait-的类型" tabindex="-1"><a class="header-anchor" href="#返回实现了-trait-的类型" aria-hidden="true">#</a> 返回实现了 <code>trait</code> 的类型</h3>', 18);
const _hoisted_48 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "impl Trait",
  -1
  /* HOISTED */
);
const _hoisted_49 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "trait",
  -1
  /* HOISTED */
);
const _hoisted_50 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">GetInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">NormalInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n    <span class="token keyword">pub</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">impl</span> <span class="token class-name">GetInfo</span> <span class="token keyword">for</span> <span class="token class-name">NormalInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>\n      <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;title: {}, content: {}, author: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">fn</span> <span class="token function-definition function">reture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">impl</span> <span class="token class-name">GetInfo</span> <span class="token punctuation">{</span>\n    <span class="token class-name">NormalInfo</span> <span class="token punctuation">{</span>\n      title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 1);
const _hoisted_51 = /* @__PURE__ */ createStaticVNode('<p>对任何实现了特定的 <code>trait</code> 的类型有条件地实现 <code>trait</code> ，好绕啊？你可以理解为在 <code>trait</code> 上实现 <code>trait</code>，只不过某个 <code>trait</code> 是有类型限制的。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">GetInfo</span><span class="token operator">&gt;</span> <span class="token class-name">ToString</span> <span class="token keyword">for</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实现了 <code>GetInfo trait</code> 的类型上实现了 <code>ToString trait</code> 。</p><p>对于任何满足特定 <code>trait bound</code> 的类型实现 <code>trait</code> ，也即在 <code>trait bound</code> 上实现 <code>trait</code> ，这种行为被称为 <code>blanket implementations</code> （一揽子实现或覆盖实现）。</p><p>这个的作用就是可以对任何实现了 <code>GetInfo trait</code> 的类型调用 <code>ToString</code> 类型的 <code>to_string</code> 方法。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>trait</code> 和 <code>trait bound</code> 使用泛型类型参数来减少重复，并且泛型还拥有单态化的特性，因此泛型可以使得代码更具通用性和灵活性，以及更好的性能。编译器利用 <code>trait bound</code> 在编译时检查代码中所用到的具体类型是否提供了正确的行为，这避免了在运行时出现错误。</p>', 7);
function _sfc_render(_ctx, _cache) {
  const _component_font = resolveComponent("font");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      _hoisted_2,
      createTextVNode(" 定义了"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("某个特定类型拥有可能与其他类型共享的功能")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。通过 "),
      _hoisted_3,
      createTextVNode(" 以抽象的方式定义共同行为。")
    ]),
    _hoisted_4,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("一个类型的行为由其可供调用的方法构成")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("。对不同类型调用相同的方法，这些类型就可以共享相同的行为了。"),
    _hoisted_5,
    createTextVNode(" 定义是一种将方法签名组合起来的方法。"),
    _hoisted_6,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("`trait` 有点类似于接口，在方法签名后跟分号，而不是在大括号中提供其实现")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("。每一个实现这个 "),
    _hoisted_8,
    createTextVNode(" 的类型都需要提供其自定义行为的方法体。"),
    _hoisted_9,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("默认实现允许调用相同的 `trait` 中的其他方法，哪怕这些方法没有默认实现")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("。"),
    _hoisted_22,
    createBaseVNode("p", null, [
      createTextVNode("相较于前面的例子，"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          _hoisted_29,
          createTextVNode(" 与泛型参数声明在一起，位于尖括号中的冒号后面")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_30,
    createBaseVNode("p", null, [
      createTextVNode("可以"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("在返回值中使用 "),
          _hoisted_48,
          createTextVNode(" 语法，来返回实现了某个 "),
          _hoisted_49,
          createTextVNode(" 的类型")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("：")
    ]),
    _hoisted_50,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("通过 `impl GetInfo` 作为返回值类型，指定了 `return` 函数返回某个实现了 `GetInfo trait` 的类型")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("，但是不确定具体的类型。"),
    _hoisted_51
  ]);
}
const rustTrait_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "rust-trait.html.vue"]]);
export {
  rustTrait_html as default
};
