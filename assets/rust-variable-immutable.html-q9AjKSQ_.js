import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, d as createVNode, e as withCtx, b as createTextVNode, a as createBaseVNode, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode(
  "h2",
  {
    id: "变量",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#变量",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 变量")
  ],
  -1
  /* HOISTED */
);
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<p>当变量不可变时，一旦值被绑定到一个名称上，你就不能改变这个值。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is: {x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is: {x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cargo run</code> 运行该程序后，会出现如下错误：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token number">2</span> <span class="token operator">|</span>     <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n  <span class="token operator">|</span>         <span class="token operator">-</span>\n  <span class="token operator">|</span>         <span class="token operator">|</span>\n  <span class="token operator">|</span>         first assignment to `x`\n  <span class="token operator">|</span>         help<span class="token punctuation">:</span> consider making this binding mutable<span class="token punctuation">:</span> `<span class="token keyword">mut</span> x`\n<span class="token number">3</span> <span class="token operator">|</span>     <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is: {x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token number">4</span> <span class="token operator">|</span>     x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\n  <span class="token operator">|</span>     <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> cannot assign twice to immutable variable\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误原因：不能对不可变变量进行二次赋值</p><blockquote><p>Rust 编译器能够保证：如果声明一个值不可变，那它真的就不会变，所以就不必跟踪它，这导致代码更容易推导。</p></blockquote><p>尽管 Rust 默认变量是不可变的，但也可以通过 <code>mut</code> 关键字来使其可变。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is: {x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is: {x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cargo run</code> 运行该程序后，出现如下信息：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>    <span class="token class-name">Finished</span> dev <span class="token punctuation">[</span>unoptimized <span class="token operator">+</span> debuginfo<span class="token punctuation">]</span> <span class="token function">target</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>30s\n     <span class="token class-name">Running</span> `target<span class="token operator">/</span>debug<span class="token operator">/</span>variables`\n<span class="token class-name">The</span> value of x is<span class="token punctuation">:</span> <span class="token number">5</span>\n<span class="token class-name">The</span> value of x is<span class="token punctuation">:</span> <span class="token number">6</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表示编译没有错误，运行成功！通过 <code>mut</code> 关键字，允许把绑定到 x 的值从 5 改到 6，这里的绑定和赋值是一个意思，但在 Rust 中更倾向于 <code>绑定</code> 这种说法。</p><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h2>', 12);
const _hoisted_14 = /* @__PURE__ */ createStaticVNode('<ul><li><p>常量无法使用 <code>mut</code> 关键字</p></li><li><p>常量不仅默认不可变，也总是不可变</p></li><li><p>声明常量需要使用 <code>const</code> 关键字，而不是 <code>let</code> 关键字，并且必须要注明值的类型</p></li><li><p>常量可以声明在任何作用域中</p></li><li><p>常量只能被设置为常量表达式，而不能是在运行时计算出的值</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 定义常量</span>\n<span class="token keyword">const</span> <span class="token constant">TIME_SECONDS</span><span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>Rust 对常量的命名规范是：名称全大写，使用下划线进行分割</p><h2 id="变量遮蔽" tabindex="-1"><a class="header-anchor" href="#变量遮蔽" aria-hidden="true">#</a> 变量遮蔽</h2><p>定义一个与之前变量同名的新变量，Rust 称之为第一个变量被第二个隐藏了（Shadowing）。这意味着当使用变量时，编译器看到的将会是第二个变量，直到第二个变量被隐藏或第二个变量的作用域结束。可以使用相同的变量名来隐藏一个变量，或者重复使用 <code>let</code> 关键字来实现多次隐藏。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  \n  <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Inner Scope value of x is: {x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Outer Scope value of x is: {x}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，将 x 绑定到了 5 上，接着通过 <code>let</code> 关键字创建了一个 x 变量，这时 x 的值就为 6 了。</p><p>进入花括号创建的内部作用域中，第三个 <code>let</code> 语句也创建了一个 x 变量，并且隐藏了之前的 x 变量，这时输出的 x 的值为12。</p><p>进入下一行语句后，花括号的作用域结束了，内部进行的 Shadowing 也结束了，此时 x 的值回退到了之前的 6，至此程序结束了。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>    <span class="token class-name">Finished</span> dev <span class="token punctuation">[</span>unoptimized <span class="token operator">+</span> debuginfo<span class="token punctuation">]</span> <span class="token function">target</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>38s\n     <span class="token class-name">Running</span> `target<span class="token operator">/</span>debug<span class="token operator">/</span>rust_tests`\n<span class="token class-name">Inner</span> <span class="token class-name">Scope</span> value of x is<span class="token punctuation">:</span> <span class="token number">12</span>\n<span class="token class-name">Outer</span> <span class="token class-name">Scope</span> value of x is<span class="token punctuation">:</span> <span class="token number">6</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>变量遮蔽与 <code>mut</code> 是有区别的</p></blockquote>', 10);
const _hoisted_24 = /* @__PURE__ */ createBaseVNode(
  "li",
  null,
  [
    /* @__PURE__ */ createTextVNode("在使用变量遮蔽时，如果没有重新使用 "),
    /* @__PURE__ */ createBaseVNode("code", null, "let"),
    /* @__PURE__ */ createTextVNode(" 关键字进行声明，会导致在编译阶段出现错误；而使用 "),
    /* @__PURE__ */ createBaseVNode("code", null, "mut"),
    /* @__PURE__ */ createTextVNode(" 关键字后，重新赋值时则不会出现错误")
  ],
  -1
  /* HOISTED */
);
const _hoisted_25 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;     &quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token keyword">str</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个 str 的类型是字符串，第二个 str 的类型是数字。如果使用 <code>mut</code> 关键字后，编译将得到错误：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;     &quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">str</span> <span class="token operator">=</span> <span class="token keyword">str</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>   <span class="token operator">|</span>\n<span class="token number">59</span> <span class="token operator">|</span>     <span class="token keyword">let</span> <span class="token keyword">mut</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;     &quot;</span><span class="token punctuation">;</span>\n   <span class="token operator">|</span>                   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> expected due to this value\n<span class="token number">60</span> <span class="token operator">|</span>     <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token keyword">str</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token operator">|</span>           <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> expected `<span class="token operator">&amp;</span><span class="token keyword">str</span>`<span class="token punctuation">,</span> found `<span class="token keyword">usize</span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个错误说明，不能去更改变量的类型。</p>', 5);
function _sfc_render(_ctx, _cache) {
  const _component_font = resolveComponent("font");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("Rust 中默认变量是不可变的")
      ]),
      _: 1
      /* STABLE */
    }),
    _hoisted_2,
    createBaseVNode("p", null, [
      createTextVNode("与不可变变量类似，"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("常量是绑定到一个名称的不允许改变的值")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("，但常量和不可变变量仍然有些区别：")
    ]),
    _hoisted_14,
    createBaseVNode("ul", null, [
      _hoisted_24,
      createBaseVNode("li", null, [
        createVNode(_component_font, { color: "red" }, {
          default: withCtx(() => [
            createTextVNode("使用变量遮蔽时，实际上相当于创建了一个新的变量")
          ]),
          _: 1
          /* STABLE */
        }),
        createTextVNode("，可以改变这个变量的类型并且可以复用这个变量的名称。")
      ])
    ]),
    _hoisted_25
  ]);
}
const rustVariableImmutable_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "rust-variable-immutable.html.vue"]]);
export {
  rustVariableImmutable_html as default
};
