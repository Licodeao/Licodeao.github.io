import { _ as _export_sfc, o as openBlock, c as createElementBlock, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="_382-链表随机节点" tabindex="-1"><a class="header-anchor" href="#_382-链表随机节点" aria-hidden="true">#</a> 382. 链表随机节点</h2><p>给你一个单链表，随机选择链表的一个节点，并返回相应的节点值。每个节点 <strong>被选中的概率一样</strong> 。</p><p>实现 <code>Solution</code> 类：</p><ul><li><code>Solution(ListNode head)</code> 使用整数数组初始化对象。</li><li><code>int getRandom()</code> 从链表中随机选择一个节点并返回该节点的值。链表中所有节点被选中的概率相等。</li></ul><p><strong>示例：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/16/getrand-linked-list.jpg" alt="img"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入\n[&quot;Solution&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;]\n[[[1, 2, 3]], [], [], [], [], []]\n输出\n[null, 1, 3, 2, 2, 3]\n\n解释\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // 返回 1\nsolution.getRandom(); // 返回 3\nsolution.getRandom(); // 返回 2\nsolution.getRandom(); // 返回 2\nsolution.getRandom(); // 返回 3\n// getRandom() 方法应随机返回 1、2、3中的一个，每个元素被返回的概率相等。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li>链表中的节点数在范围 <code>[1, 104]</code> 内</li><li><code>-104 &lt;= Node.val &lt;= 104</code></li><li>至多调用 <code>getRandom</code> 方法 <code>104</code> 次</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>法一：统计出链表的长度n，随机数为k（通过random库函数的方式），随后遍历链表，返回链表中第k个节点即可</p><ul><li>由于要遍历两次，所以该方法的时间复杂度为O(n)，空间复杂度为O(1)</li></ul><p>法二：蓄水抽样法，遍历到第k个节点时，以 1/k 的概率选它，如果选中就返回</p><ul><li>实际操作是通过变量保存每次选中的节点</li><li>当只有1个节点时，其被选中的概率就是1/1=1，返回</li><li>有2个节点时（1=&gt;2），2被选中的概率为1/2，那么1被选中的概率也为1/2</li><li>有3个节点时（1=&gt;2=&gt;3），3被选中的概率为1/3，(1=&gt;2)这个概率为2/3，那么1或2被选中的概率为2/3 × 1/2 = 1/3</li><li>有4个节点时（1=&gt;2=&gt;3=&gt;4），4被选中的概率为1/4，(1=&gt;2=&gt;3=&gt;4)这个概率为3/4，那么1或2或3被选中的概率为3/4 × 1/3 = 1/4</li><li>那么，以此类推，有k个节点时，k被选中的概率为1/k，选中就返回</li><li>对于该方法来说，只用遍历一次即可</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 法一</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 存放链表</span>\n    <span class="token keyword">private</span> head <span class="token operator">=</span> <span class="token keyword">null</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> head\n    <span class="token punctuation">}</span>\n    \n\n    <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 统计节点个数</span>\n        <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span>\n        <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head\n        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            n<span class="token operator">++</span>\n            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next\n        <span class="token punctuation">}</span>\n\n        cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head\n\n        <span class="token keyword">let</span> k <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token comment">// 遍历到第k个节点</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> cur<span class="token punctuation">.</span>val\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 法二</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 存放链表</span>\n    <span class="token keyword">private</span> head <span class="token operator">=</span> <span class="token keyword">null</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> head\n    <span class="token punctuation">}</span>\n    \n\n    <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head\n        <span class="token comment">// 存放当前更新的结果</span>\n        <span class="token keyword">let</span> res <span class="token operator">=</span> cur<span class="token punctuation">.</span>val\n        <span class="token comment">// 注意这里不能写cur.next !== null，因为这道题的测试用例会返回null</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            i<span class="token operator">++</span>\n            <span class="token comment">// 以1/i的概率选中，更新res</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                res <span class="token operator">=</span> cur<span class="token punctuation">.</span>val\n            <span class="token punctuation">}</span>\n            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> res\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 16);
const _hoisted_17 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_17);
}
const leetcode382_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "leetcode-382.html.vue"]]);
export {
  leetcode382_html as default
};
