import { _ as _export_sfc, o as openBlock, c as createElementBlock, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="requests进阶" tabindex="-1"><a class="header-anchor" href="#requests进阶" aria-hidden="true">#</a> requests进阶</h2><h3 id="一、使用cookie模拟登录" tabindex="-1"><a class="header-anchor" href="#一、使用cookie模拟登录" aria-hidden="true">#</a> 一、使用cookie模拟登录</h3><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20220814234146099.png" alt="image-20220814234146099"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 登录 -&gt; 得到一个Cookie -&gt; 带着Cookie去请求书架上的url -&gt; 得到书架上的内容 (过程是连续的)</span>\n<span class="token comment"># 这个过程可以使用session进行请求，在这个过程中Cookie并不会丢失</span>\n\n<span class="token comment"># 创建会话</span>\n<span class="token keyword">import</span> requests\nurl <span class="token operator">=</span> <span class="token string">&#39;https://xxx.com/ck/user/login&#39;</span>\nsession <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>\ndata <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;loginName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;xxxxxxxxxxxxx&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;xxxxxxxxxxxxx&quot;</span>\n<span class="token punctuation">}</span>\nres <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span> \n				↓\n<span class="token operator">&lt;</span>RequestsCookieJar<span class="token punctuation">[</span><span class="token operator">&lt;</span>Cookie accessToken<span class="token operator">=</span>avatarUrl<span class="token operator">%</span>3Dhttps<span class="token operator">%</span>253A<span class="token operator">%</span>252F<span class="token operator">%</span>252Fcdn<span class="token punctuation">.</span>static<span class="token punctuation">.</span>17k<span class="token punctuation">.</span>com<span class="token operator">%</span>252Fuser<span class="token operator">%</span>252Favatar<span class="token operator">%</span>252F06<span class="token operator">%</span>252F06<span class="token operator">%</span>252F06<span class="token operator">%</span>252F97840606<span class="token punctuation">.</span>jpg<span class="token operator">-</span>88x88<span class="token operator">%</span>253Fv<span class="token operator">%</span>253D1660491812000<span class="token operator">%</span>26id<span class="token operator">%</span>3D97840606<span class="token operator">%</span>26nickname<span class="token operator">%</span>3D<span class="token operator">%</span><span class="token number">25E4</span><span class="token operator">%</span>25B9<span class="token operator">%</span>25A6<span class="token operator">%</span><span class="token number">25E5</span><span class="token operator">%</span>258F<span class="token operator">%</span>258B6zCy66999<span class="token operator">%</span>26e<span class="token operator">%</span>3D1676044527<span class="token operator">%</span>26s<span class="token operator">%</span>3Db4519e3246aeb8b1 <span class="token keyword">for</span> <span class="token punctuation">.</span>17k<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Cookie c_channel<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">for</span> <span class="token punctuation">.</span>17k<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Cookie c_csc<span class="token operator">=</span>web <span class="token keyword">for</span> <span class="token punctuation">.</span>17k<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Cookie uuid<span class="token operator">=</span><span class="token number">35633E16</span><span class="token operator">-</span>B5B2<span class="token operator">-</span>170D<span class="token operator">-</span><span class="token number">9606</span><span class="token operator">-</span>6FA83C14B800 <span class="token keyword">for</span> <span class="token punctuation">.</span>17k<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n\nresp <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://...com/ck/author/shelf?page=1&amp;appKey=2406394919&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>\n\n<span class="token comment"># 法二：可以正常地使用requests进行登录，但需要在headers中添加cookie字段（实际上，session也是这么做的，因此两种方法等价）</span>\nresp2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://...com/ck/author/shelf?page=1&amp;appKey=2406394919&#39;</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&quot;Cookie&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;...&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>resp2<span class="token punctuation">.</span>text<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、防盗链处理" tabindex="-1"><a class="header-anchor" href="#二、防盗链处理" aria-hidden="true">#</a> 二、防盗链处理</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 以梨视频为例</span>\n<span class="token triple-quoted-string string">&#39;&#39;&#39;\n	首先，查看页面源代码发现页面中并不包含video标签，因此可断定视频是经过二次请求获取的。\n	通过查看Chrome Fetch/XHR可发现请求视频链接，展开json\n\n	首页视频地址：https://www.pearvideo.com/video_1731815\n	元素中video标签包含的src：https://video.pearvideo.com/mp4/adshort/20210610/cont-1731815-15692888_adpkg-ad_hd.mp4\n	二次请求url：https://www.pearvideo.com/videoStatus.jsp?contId=1731815&amp;mrd=0.011130757000714198\n	二次请求json返回的srcUrl：https://video.pearvideo.com/mp4/adshort/20210610/1660531619714-15692888_adpkg-ad_hd.mp4\n	二次请求json返回的systemTime: &quot;1660531619714&quot;\n	二次请求json所带参数：contId=1731815&amp;mrd=0.5023500046197205\n	\n	经过测试，发现json返回的视频链接并不存在，而video标签中的视频链接是可以播放的。\n	对比两个链接，可以发现有不同的地方：cont-1731815 与 1660531619714\n	那么是否可以将srcUrl中的1660531619714替换成cont-1731815即可\n	\n	综上所述，真正的视频链接是由contId决定的\n	于是大致思路：\n	1. 从首页视频地址：https://www.pearvideo.com/video_1731815分离出contId：1731815\n	2. 从二次请求返回的json中拿到srcUrl：https://video.pearvideo.com/mp4/adshort/20210610/1660531619714-15692888_adpkg-ad_hd.mp4\n	3. 将contId替换到srcUrl中即可\n&#39;&#39;&#39;</span>\n\n<span class="token keyword">import</span> requests\nurl <span class="token operator">=</span> <span class="token string">&#39;https://www.pearvideo.com/video_1731815&#39;</span>\ncontId <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\nheaders <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&#39;</span><span class="token punctuation">,</span>\n  	<span class="token triple-quoted-string string">&#39;&#39;&#39;\n  		防盗链：溯源，当前本次请求的上一级是谁，是一种链级关系\n  		例如上面例子中二次请求url的上一级为https://www.pearvideo.com/video_1731815\n			也就是说只有访问了https://www.pearvideo.com/video_1731815才可以访问二次请求url\n  	&#39;&#39;&#39;</span>\n    <span class="token string">&quot;Referer&quot;</span><span class="token punctuation">:</span> url \n<span class="token punctuation">}</span>\nvedioStatusUrl <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;https://www.pearvideo.com/videoStatus.jsp?contId=</span><span class="token interpolation"><span class="token punctuation">{</span>contId<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>\nresp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>vedioStatusUrl<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>\ndic <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>\nsrcUrl <span class="token operator">=</span> dic<span class="token punctuation">[</span><span class="token string">&#39;videoInfo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;videos&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;srcUrl&#39;</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 从字典中取出srcUrl\nsystemTime <span class="token operator">=</span> dic<span class="token punctuation">[</span><span class="token string">&#39;systemTime&#39;</span><span class="token punctuation">]</span>\nsrcUrl <span class="token operator">=</span> srcUrl<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>systemTime<span class="token punctuation">,</span><span class="token string-interpolation"><span class="token string">f&quot;cont-</span><span class="token interpolation"><span class="token punctuation">{</span>contId<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>srcUrl<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> https<span class="token punctuation">:</span><span class="token operator">//</span>video<span class="token punctuation">.</span>pearvideo<span class="token punctuation">.</span>com<span class="token operator">/</span>mp4<span class="token operator">/</span>adshort<span class="token operator">/</span><span class="token number">20210610</span><span class="token operator">/</span>cont<span class="token operator">-</span><span class="token number">1731815</span><span class="token operator">-</span>15692888_adpkg<span class="token operator">-</span>ad_hd<span class="token punctuation">.</span>mp4\n\n<span class="token comment"># 下载视频</span>\n<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;a.mp4&quot;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>\n  f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>srcUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>\n  f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、代理" tabindex="-1"><a class="header-anchor" href="#三、代理" aria-hidden="true">#</a> 三、代理</h3><p>原理：通过第三方的IP去发送请求</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests\nproxies <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&quot;https&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://218.60.8.83:3129&quot;</span>\n<span class="token punctuation">}</span>\nres <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;https:www.baidu.com&quot;</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>\nres<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">&#39;utf-8&#39;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、多线程" tabindex="-1"><a class="header-anchor" href="#四、多线程" aria-hidden="true">#</a> 四、多线程</h3><blockquote><p>线程与进程的区别：</p><p>​ 线程是执行单位</p><p>​ 进程是资源单位，每一个进程至少需要一个线程</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread\n\n<span class="token comment"># 子线程</span>\n<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n  	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;func&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n\n<span class="token comment"># 主线程</span>\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>\n	  t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">)</span> <span class="token comment"># 创建线程并给线程安排任务</span>\n    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 多线程状态为可以开始工作状态(开启线程)，具体执行时间由CPU决定</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n      \n<span class="token comment"># 创建多线程</span>\n<span class="token keyword">from</span> multipleprocessing <span class="token keyword">import</span> Process\n<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;子进程&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n    \n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n  p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">)</span>\n  p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;主进程&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n    \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、线程池与进程池" tabindex="-1"><a class="header-anchor" href="#五、线程池与进程池" aria-hidden="true">#</a> 五、线程池与进程池</h3><blockquote><p>线程池/进程池：一次性开辟一些线程/进程，向线程池/进程池提交任务，线程/进程任务的调度交给线程池/进程池来完成</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> ProcessPoolExecutor\n<span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n   \n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n	<span class="token comment"># 创建线程池</span>\n	<span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n      t<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>fn<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&quot;线程</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;over!&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 15);
const _hoisted_16 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_16);
}
const Python_Reptile_er__html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Python Reptile(er).html.vue"]]);
export {
  Python_Reptile_er__html as default
};
