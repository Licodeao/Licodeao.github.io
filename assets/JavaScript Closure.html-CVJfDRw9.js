import { _ as _export_sfc, o as openBlock, c as createElementBlock, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p><strong>理解闭包，需要函数知识的铺垫，而非读概念就能明白。</strong></p><p>如何快乐并有趣地理解闭包呢？</p><p>​ 首先，我想感谢一下《Head First JavaScript程序设计》的作者：Eric T. Freeman 和 Elisabeth Robson. 感谢这两位能写出如此棒的图书 ，至少在我看来，当我读完关于闭包的这一章时，我想我已经明白了闭包。如果你买了这本书并认真地读完，我想你会知道我说的是什么东西了。</p><hr><p>​ 好了，先来说说<strong>匿名函数</strong>吧。<strong>匿名函数是没有名字的函数表达式</strong>，它就好比函数表达式的右手端。如：<code>function () { ... }</code> 函数表达式可以有形参，当然<strong>匿名函数也可以有形参</strong>。在代码中我们定义了一个函数，然后就可以在代码的任何地方通过函数名或者变量名，去调用它。<strong>在JavaScript中，函数可以是值</strong>。<strong>这个值实际上是指向函数的引用</strong>，而非真的是个数值，当然我们可以这么去想，帮助我们去理解。<strong>函数与其他值不同的地方在于，我们可以调用它。函数属于一等值</strong>，一等值是啥？<strong>我们可以将一等值赋给变量或存储在数组和对象等数据结构中、将其传递给函数、从函数中返回它们</strong>。既然函数也属于一等值，那么函数就可以做上面说的事。<strong>在JS中，我们尽量不要认为函数是特殊的，将它认为值有助于我们理解。</strong></p><hr><p>​ 接着来讲讲<strong>作用域</strong>，讲作用域之前建议先去看看并熟悉浏览器执行JavaScript代码的工作原理，这有助于理解接下来要讲的东西。我们知道，<strong>浏览器分两遍去执行JavaScript代码，第一遍分析代码中是否存在函数声明，若有，则定义这些函数声明创建的函数；处理完所有的函数声明后，再按从上到下的顺序执行JavaScript代码，若在执行的过程中发现了有函数表达式，再创建其引用并完成接下来的工作。<strong>通过上述讲的工作原理，我们能发现</strong>函数声明创建的函数总是先定义</strong>，因为浏览器第一遍执行时就是在寻找函数声明。这意味着可讲<strong>函数声明放在代码的任何地方，且可以在任何地方去调用它，因为它不可能没有被定义</strong>。对于<strong>在代码的任何地方，函数声明创建的函数都是已定义的，这被称为提升(hoisting)</strong>。而函数表达式呢？得等到第二遍时才能被定义。假如我们在函数中再嵌套一个函数时，又会怎么影响作用域呢？我们来看个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> migrating <span class="token operator">=</span> ture<span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">fly</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> sound <span class="token operator">=</span> <span class="token string">&quot;Flying&quot;</span><span class="token punctuation">;</span>\n    functiong <span class="token function">wingFlapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n         <span class="token function">wingFlapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">var</span> sound <span class="token operator">=</span> <span class="token string">&quot;Quack&quot;</span><span class="token punctuation">;</span>\n     <span class="token keyword">var</span> <span class="token function-variable function">quacker</span> <span class="token operator">=</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">quacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>migrating<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">quack</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">fly</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <strong>在代码顶层定义的函数是全局的，而在函数中定义的函数是局部的</strong>。何为代码的顶层？我们知道函数有函数名和函数体，那么顶层就是指除函数体外的，也就是函数名这一行了。<strong>顶层是相对于每一个函数而言的，不是所有的代码，这要清楚</strong>。那么在上面这个例子中，代码的顶层定义的函数有fly、quack，因此这两个函数的作用域都是全局的，当然fly得当浏览器执行函数表达式后，才是已定义的（<strong>函数表达式定义的函数，只有在浏览器执行到其所在的那一行后，才是被定义的</strong>）。而其他函数，<code>wingFlapper</code>的作用域仅在整个fly函数内，<code>quacker</code>的作用域仅在整个quack函数内，但仅在这个函数表达式(<code>quacker</code>是函数表达式)被执行后且在到达函数quack末尾前，它才是已定义的。</p><p>​ 总的来说：<strong>在函数内部，如果你使用函数声明创建了一个嵌套函数，那么在这个函数的函数体的任何地方，嵌套函数都是已定义的；如果你使用函数表达式创建了一个嵌套函数，则在这个函数的函数体内，仅当函数表达式执行完之后，嵌套函数才是已定义的。</strong></p><hr><p>​ 说到作用域，再来谈谈<strong>词法作用域</strong>，<strong>词法意味着只需要查看代码的结构就可以确定变量的作用域</strong>。来看个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> just <span class="token operator">=</span> <span class="token string">&quot;Oh&quot;</span><span class="token punctuation">;</span>            ————<span class="token operator">&gt;</span>这里定义了一个全局变量just\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> just <span class="token operator">=</span> <span class="token string">&quot;Hey&quot;</span><span class="token punctuation">;</span>    ————<span class="token operator">&gt;</span>这里定义了一个同名的局部变量just\n    <span class="token keyword">return</span> just<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 首先我们要明白：<strong>当一个全局变量与局部变量同名时，局部变量将遮住全局变量</strong>。让我们将视线转到代码，函数f被调用后，将返回just，那么这个just引用的是哪个变量呢？词法作用域总是在最近的函数作用域内查找just，如果在这个作用域内没有找到，再在全局作用域内查找。也就是说，<strong>词法作用域规定了先在局部作用域内查找有没有同名的变量，如果没有，那么就再在全局作用域内查找</strong>。我觉得，这个词法作用域就是对&quot;<strong>当一个全局变量与局部变量同名时，局部变量将遮住全局变量</strong> &quot;这句话的一个补充吧，<strong>词法作用域描述的是这句话的过程，而这句话就是这个过程的结论。</strong></p><hr><p>终于，经过了重重的铺垫，我们要讨论<strong>闭包</strong>了。</p><h2 id="什么是闭包" tabindex="-1"><a class="header-anchor" href="#什么是闭包" aria-hidden="true">#</a> 什么是闭包？</h2><p><strong>闭包 = 函数 + 环境</strong> 当然这其中的函数可不是单纯的函数，环境也不是单纯的环境。下面讲一一为你解密，这里的函数到底是啥？环境到底是啥？</p><p><strong>极为重要的一点是：每个函数都有与之相关联的环境，而这个环境中包含了其作用域内所有的局部变量，也就是说所有的局部变量都存储在环境中，且这个环境因函数被创建而出现。</strong></p><h2 id="解密这个函数时-我们来说说啥叫自由变量" tabindex="-1"><a class="header-anchor" href="#解密这个函数时-我们来说说啥叫自由变量" aria-hidden="true">#</a> 解密这个函数时，我们来说说啥叫自由变量？</h2><p><strong>自由变量</strong>：是指<strong>不是在本地作用域内定义的变量</strong>。 下面举个栗子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token parameter">phrase</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">var</span> ending <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>beingFunny<span class="token punctuation">)</span><span class="token punctuation">{</span>\n         ending <span class="token operator">=</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>notSoMuch<span class="token punctuation">)</span><span class="token punctuation">{</span>\n         ending <span class="token operator">=</span> <span class="token string">&quot; so muck &quot;</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span>phrase <span class="token operator">+</span> ending<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看上面的栗子，先考考你是否能指出哪些是自由变量（一定要根据概念来找哦~）？</p><p>​ 很显然，根据概念，<code>beingFunny</code>和<code>notSoMuch</code>都是自由变量，因为在函数Say中，它们都没有被定义呀，说明它们来自于其他函数啊，<strong>强调一点：概念中的本地作用域是相对于每个函数而言，而不是哪个特定的函数</strong>。因此当代码中有多个函数时，我们说的本地作用域是每一个函数的本地作用域。希望这对于你们理解自由变量有帮助吧...</p><h2 id="是时候说明函数和环境了" tabindex="-1"><a class="header-anchor" href="#是时候说明函数和环境了" aria-hidden="true">#</a> 是时候说明函数和环境了</h2><p>​ 前面我们不是说到过每个函数都有与之相关联的环境吗？<strong>环境也是相对于每个函数而言，一个函数有一个与之相关联的环境</strong>。因此，假如一个函数中出现了自由变量，并给这个自由变量赋了值，那么环境中是不是也相应地存储了这个有值的自由变量？答案是肯定的。因此，我们说：<strong>在某个环境中，当环境中所有的自由变量都被绑定了值（或者说都被赋了值），便将函数敲定了，那么这个函数就叫做敲定函数</strong>。<strong>显然地，环境得是给所有的自由变量绑定了值的环境才行。</strong></p><blockquote><p>综上所述：敲定了的函数 + 给每个自由变量提供了值的环境 === 闭包；</p></blockquote><p><strong>官方说明的闭包概念：包含自由变量的函数与为所有这些自由变量提供了变量绑定的环境一起，被称为闭包。</strong></p><h2 id="举个栗子-使用闭包来实现神奇的计数器" tabindex="-1"><a class="header-anchor" href="#举个栗子-使用闭包来实现神奇的计数器" aria-hidden="true">#</a> 举个栗子：使用闭包来实现神奇的计数器</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n     <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n     <span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n           count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n           <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n     <span class="token keyword">return</span>  counter<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> doCount <span class="token operator">=</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里哪有闭包呢？我怎么看不出来？</p><p>别急，我们一步步来分析闭包到底在哪里。</p><p>首先，我们观察到：在函数counter外，定义了一个变量count，而这个变量也在函数内出现了，并进行赋值运算，那么此时我们想想自由变量的定义以及闭包的定义，是不是觉得有点熟悉？</p><p>没错！相对于函数counter来说，count就是一个自由变量，而在与函数counter相关联的环境中，又为它进行了赋值，所以这个函数counter就是一个闭包呀！因此，当函数<code>makeCounter</code>被调用时，返回的是一个闭包。</p><h2 id="那么闭包到底有什么好处呢" tabindex="-1"><a class="header-anchor" href="#那么闭包到底有什么好处呢" aria-hidden="true">#</a> 那么闭包到底有什么好处呢？</h2><p>在上面那个例子中，使用闭包中的变量count，在全局作用域中，根本看不到。只能是通过调用闭包或者包含闭包的函数来使用这个变量。</p><h2 id="再举一个例子来谈谈闭包的好处以及闭包包含的环境" tabindex="-1"><a class="header-anchor" href="#再举一个例子来谈谈闭包的好处以及闭包包含的环境" aria-hidden="true">#</a> 再举一个例子来谈谈闭包的好处以及闭包包含的环境</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span>　<span class="token keyword">set</span>（message<span class="token punctuation">,</span> n）｛\n　　　　　<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     message <span class="token operator">=</span> <span class="token string">&quot;Oh!&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;done!&quot;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然地，调用set时，创建了一个闭包（<code>setTimeout</code>函数那一块），自由变量是message，而message的值<strong>最开始</strong>为传入的形参&quot;done!&quot;。但是在闭包外，将message的值改变了，因此闭包被调用时，将使用的是改变的值。<strong>所以，闭包包含的是实际环境，而非环境的副本。</strong></p><p>闭包的另一个好处就是：<strong>闭包中包含的变量不会在某一事件完成后就消失了，而是一直存在，除非你关闭网页</strong>。因此在大多数事件处理程序中，都尽量用闭包，这避免在用户使用中某一事件突然失效而导致用户体验不好。</p><p>总之，闭包是个好东西，在事件成立程序中尽量用就对了，以上就是我的思考与体会，希望对你有用，加油!</p>', 41);
const _hoisted_42 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_42);
}
const JavaScript_Closure_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "JavaScript Closure.html.vue"]]);
export {
  JavaScript_Closure_html as default
};
