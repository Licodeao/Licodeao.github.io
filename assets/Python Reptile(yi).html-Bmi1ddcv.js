import { _ as _export_sfc, o as openBlock, c as createElementBlock, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="一、-robots-txt协议" tabindex="-1"><a class="header-anchor" href="#一、-robots-txt协议" aria-hidden="true">#</a> 一、 <code>robots.txt</code>协议</h2><blockquote><p>规定了网站中哪些数据可以被爬虫爬取，哪些数据不可爬(非要爬也行，大不了进🍊)</p></blockquote><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/202936.jpg" alt=""></p><p>​ （b站 <code>robots.txt</code>协议）</p><h2 id="二、web请求过程" tabindex="-1"><a class="header-anchor" href="#二、web请求过程" aria-hidden="true">#</a> 二、Web请求过程</h2><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/211724.jpg" alt=""></p><blockquote><p>服务器渲染与客户端渲染的区别</p></blockquote><table><thead><tr><th>服务器渲染</th><th>服务器将数据与HTML整合，统一返回给客户端，源代码中可看见数据(一次请求)</th></tr></thead><tbody><tr><td><strong>客户端渲染</strong></td><td><strong>服务器返回HTML骨架，源代码中看不见数据(多次请求返回数据)</strong></td></tr></tbody></table><h2 id="三、请求头与响应头" tabindex="-1"><a class="header-anchor" href="#三、请求头与响应头" aria-hidden="true">#</a> 三、请求头与响应头</h2><ol><li><strong>请求头</strong>中常见的一些重要内容 <ul><li><code>User-Agent</code>：请求载体的身份标识</li><li><code>Referer</code>：防盗链(请求从哪个页面来的？反爬会用到)</li><li><code>cookie</code>：本地字符串数据信息(用户登录信息，反爬的token)</li></ul></li><li><strong>响应头</strong>中常见的一些重要内容 <ul><li><code>cookie</code>：本地字符串数据信息(用户登录信息，反爬的token)</li><li>各种莫名其妙的字符串：防止攻击和反爬</li></ul></li></ol><h2 id="四、requests" tabindex="-1"><a class="header-anchor" href="#四、requests" aria-hidden="true">#</a> 四、requests</h2><p>requests相对于<code>urllib</code>简化了许多步骤，使用起来更为方便</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests\n\nurl <span class="token operator">=</span> <span class="token string">&#39;https://www.xxx.com&#39;</span>\n\n<span class="token comment"># get请求对应的参数是params，post请求对应的参数是data</span>\nparams <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;24&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;100:90&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;start&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;limit&quot;</span><span class="token punctuation">:</span> <span class="token number">20</span>\n<span class="token punctuation">}</span>\n\nresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> params <span class="token operator">=</span> params<span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 若此时无数据，则表明对方做了反爬\n\n<span class="token comment"># 注意最后记得关闭请求，防止访问过多</span>\nresponse<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、数据解析与提取" tabindex="-1"><a class="header-anchor" href="#五、数据解析与提取" aria-hidden="true">#</a> 五、数据解析与提取</h2><blockquote><p>多数情况下，并不需要整个网页的内容，只需要一小部分，因此需要进行数据提取。</p></blockquote><ol><li><p><code>re</code>解析</p><p>正则表达式解析</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 以下都为元字符</span>\n  <span class="token punctuation">.</span>  		匹配除换行符以外的任意字符\n  \\w 		匹配字母、数字、下划线\n  \\s		匹配任意的空白字符\n  \\d 		匹配数字\n  \\n		匹配一个换行符\n  \\t		匹配一个制表符\n\n  <span class="token operator">^</span>			匹配字符串的开始\n  $			匹配字符串的结束\n\n  \\W		匹配非字母或数字或下划线\n  \\D		匹配非数字\n  \\S		匹配非空白符\n  a<span class="token operator">|</span>b		匹配字符a或字符b\n  <span class="token punctuation">(</span><span class="token punctuation">)</span>		匹配括号内的表达式\n  <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>		匹配字符组中的字符\n  <span class="token punctuation">[</span><span class="token operator">^</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>		匹配除了字符组中字符的所有字符\n\n<span class="token comment"># 以下都为量词</span>\n  <span class="token operator">*</span>			重复<span class="token number">0</span>次或更多次\n  <span class="token operator">+</span>			重复一次或更多次\n  ?			重复<span class="token number">0</span>次或<span class="token number">1</span>次\n  <span class="token punctuation">{</span>n<span class="token punctuation">}</span>			重复n次\n  <span class="token punctuation">{</span>n<span class="token punctuation">,</span><span class="token punctuation">}</span>			重复n次或更多次\n  <span class="token punctuation">{</span>n<span class="token punctuation">,</span>m<span class="token punctuation">}</span>				重复n到m次\n\n<span class="token comment">#	贪婪匹配与惰性匹配</span>\n	<span class="token punctuation">.</span><span class="token operator">*</span>		贪婪匹配\n  <span class="token punctuation">.</span><span class="token operator">*</span>?		惰性匹配\n  \n<span class="token comment"># re模块</span>\n<span class="token keyword">import</span> re\n\n<span class="token number">1.</span> findall<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 匹配字符串中所有符合正则的内容\n  lst <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&quot;\\d+&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;电话号码是10086&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;10086&#39;</span><span class="token punctuation">]</span>\n<span class="token number">2.</span> finditer<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 匹配字符串中所有的内容\n	ite <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">r&quot;\\d+&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;电话号码是10086&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span>ite<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;10086&#39;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>callback_iterator <span class="token builtin">object</span> at <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>返回一个迭代器<span class="token punctuation">)</span>\n  <span class="token keyword">for</span> i <span class="token keyword">in</span> ite<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>re<span class="token punctuation">.</span>Match <span class="token builtin">object</span><span class="token punctuation">;</span> span<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token operator">=</span><span class="token string">&#39;10086&#39;</span><span class="token operator">&gt;</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">10086</span><span class="token punctuation">,</span> 从迭代器中拿到内容需要使用group<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">3.</span> search<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 全文检索<span class="token punctuation">,</span> 找到一个结果立即返回<span class="token punctuation">,</span> 拿到内容需要使用group<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">4.</span> <span class="token keyword">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 从头开始匹配\n\n<span class="token comment"># 预加载正则表达式</span>\nobj <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&quot;\\d+&quot;</span><span class="token punctuation">)</span>\nret <span class="token operator">=</span> obj<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">&quot;电话号码是10086&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> i <span class="token keyword">in</span> ret<span class="token punctuation">:</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">10086</span>\n  \nobj <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&quot;&lt;div class=&#39;.*?&#39;&gt;.*?&lt;/div&gt;&quot;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> re<span class="token punctuation">.</span>S：让<span class="token punctuation">.</span>能匹配换行符\n<span class="token comment"># 取class的值 先括起来，前面再加?P并起别名，最后在group中获取别名即可</span>\n<span class="token comment"># (?P&lt;别名&gt;正则) -&gt; 可以单独从正则匹配的内容中进一步提取内容</span>\nobj <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&quot;&lt;div class=&#39;(?P&lt;className&gt;.*?)&#39;&gt;.*?&lt;/div&gt;&quot;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span> \nret <span class="token operator">=</span> obj<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> i <span class="token keyword">in</span> ret<span class="token punctuation">:</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">&#39;className&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 获取<span class="token keyword">class</span>值\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>bs4</code>解析</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup\n<span class="token keyword">import</span> requests\n\nurl <span class="token operator">=</span> <span class="token string">&#39;https://www.xxx.com&#39;</span>\nresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n\n<span class="token number">1.</span> 将source code交给BeautifulSoup，并生成bs4对象\n	page <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;html.parser&quot;</span><span class="token punctuation">)</span> <span class="token comment"># &quot;html.parser&quot;指定HTML解析器</span>\n<span class="token number">2.</span> 从bs对象中查找数据\n	<span class="token comment"># find(标签名，属性=值)</span>\n  <span class="token comment"># find_all(标签名，属性=值)</span>\n  tables <span class="token operator">=</span> page<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">,</span> class_ <span class="token operator">=</span> <span class="token string">&quot;hq_table&quot;</span><span class="token punctuation">)</span> <span class="token comment"># class_是bs4为了避免报错，因为class是python的关键字</span>\n  等价于 tables <span class="token operator">=</span> page<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">,</span> attr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;hq_table&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 此方法也可以避免class报错</span>\n  <span class="token keyword">print</span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>xpath</code>解析</p><p>xpath是在XML文档中搜索内容的一门语言</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;\n	1. 将要解析的html内容构造出etree对象\n	2. 使用etree对象的xpath()方法配合xpath表达式来完成对数据的提取\n&#39;&#39;&#39;</span>\n\n<span class="token comment"># example</span>\n<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree\nxml <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;\n	&lt;book&gt;\n		&lt;id&gt;1&lt;/id&gt;\n		&lt;name&gt;野花遍地香&lt;/name&gt;\n		&lt;price&gt;1.23&lt;price&gt;\n		&lt;nick&gt;臭豆腐&lt;/nick&gt;\n		&lt;author&gt;\n			&lt;nick id=&quot;10086&quot;&gt;周大强&lt;/nick&gt;\n			&lt;nick id=&quot;10010&quot;&gt;周芷若&lt;/nick&gt;\n			&lt;nick class=&quot;joy&quot;&gt;周杰伦&lt;/nick&gt;\n			&lt;nick class=&quot;jolin&quot;&gt;蔡依林&lt;/nick&gt;\n			&lt;div&gt;\n				&lt;nick&gt;哈哈&lt;/nick&gt;\n			&lt;/div&gt;\n		&lt;/author&gt;\n		\n		&lt;partner&gt;\n			&lt;nick id=&quot;ppc&quot;&gt;碰碰车&lt;/nick&gt;\n			&lt;nick id=&quot;ppbc&quot;&gt;频频爆出&lt;/nick&gt;\n		&lt;/partner&gt;\n	&lt;/book&gt;\n&#39;&#39;&#39;</span>\ntree <span class="token operator">=</span> etree<span class="token punctuation">.</span>XML<span class="token punctuation">(</span>xml<span class="token punctuation">)</span>\nresult <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&quot;/book&quot;</span><span class="token punctuation">)</span> <span class="token comment"># / 表示层级关系，第一个/是根节点</span>\nresult2 <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&quot;/book/name/text()&quot;</span><span class="token punctuation">)</span>\nresult3 <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&quot;/book/author//nick/text()&quot;</span><span class="token punctuation">)</span> <span class="token comment"># // 表示后代</span>\nresult4 <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&quot;./a/@href&quot;</span><span class="token punctuation">)</span> <span class="token comment"># ./ -&gt; 相对查找，@ -&gt; 获取属性值</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>Element book at <span class="token number">0x2078373fec0</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;野花遍地香&#39;</span><span class="token punctuation">]</span> <span class="token comment"># text()获取文本内容</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;周大强&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;周芷若&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;周杰伦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;蔡依林&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;哈哈&#39;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>', 16);
const _hoisted_17 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_17);
}
const Python_Reptile_yi__html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Python Reptile(yi).html.vue"]]);
export {
  Python_Reptile_yi__html as default
};
