import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, e as withCtx, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode(
  "h2",
  {
    id: "泛型",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#泛型",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 泛型")
  ],
  -1
  /* HOISTED */
);
const _hoisted_2 = /* @__PURE__ */ createBaseVNode(
  "h3",
  {
    id: "函数中的泛型",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#函数中的泛型",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 函数中的泛型")
  ],
  -1
  /* HOISTED */
);
const _hoisted_3 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token operator">&amp;</span>v <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span>\n      largest <span class="token operator">=</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想要在多个数组中寻找各自的最大值，可能会写多个相同的代码，重复的代码是冗余且容易出错的，更新逻辑时又不得不记住需要修改多处地方的代码。</p><p>根据这个问题，我们可以创建一层代码的的抽象，定义一个处理任意整型列表作为参数的函数。（这里只是抽象，并没有使用泛型）</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 一层抽象</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">find_largest_value</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">i32</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> arr <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> i <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span>\n        largest <span class="token operator">=</span> i<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    largest\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result_1 <span class="token operator">=</span> <span class="token function">find_largest_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result_1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result_2 <span class="token operator">=</span> <span class="token function">find_largest_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result_2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// The largest number is 231</span>\n<span class="token comment">// The largest number is 789</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>find_largest_value</code> 函数有一个参数 <code>arr</code> ，它代表会传递给函数的任何具体的 <code>i32</code> 值的 <code>slice</code> 。</p>', 5);
const _hoisted_8 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "T",
  -1
  /* HOISTED */
);
const _hoisted_9 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用泛型</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">find_largest_value</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> arr <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> i <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span>\n        largest <span class="token operator">=</span> i<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    largest\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result_1 <span class="token operator">=</span> <span class="token function">find_largest_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result_1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result_2 <span class="token operator">=</span> <span class="token function">find_largest_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result_2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>find_largest_value</code> 函数定义中：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">find_largest_value</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>', 3);
const _hoisted_12 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "<T>",
  -1
  /* HOISTED */
);
const _hoisted_13 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "T",
  -1
  /* HOISTED */
);
const _hoisted_14 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "<>",
  -1
  /* HOISTED */
);
const _hoisted_15 = /* @__PURE__ */ createStaticVNode('<p>上方代码即使使用了泛型也依然不能通过编译，会出现以下错误：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>  <span class="token operator">|</span>\n<span class="token number">6</span> <span class="token operator">|</span>       <span class="token keyword">if</span> i <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span>\n  <span class="token operator">|</span>          <span class="token operator">-</span> <span class="token operator">^</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">&amp;</span><span class="token class-name">T</span>\n  <span class="token operator">|</span>          <span class="token operator">|</span>\n  <span class="token operator">|</span>          <span class="token operator">&amp;</span><span class="token class-name">T</span>\n  <span class="token operator">|</span>\nhelp<span class="token punctuation">:</span> consider restricting <span class="token keyword">type</span> <span class="token type-definition class-name">parameter</span> `<span class="token class-name">T</span>`\n  <span class="token operator">|</span>\n<span class="token number">2</span> <span class="token operator">|</span>   <span class="token keyword">fn</span> <span class="token function-definition function">find_largest_value</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token class-name">PartialOrd</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>\n  <span class="token operator">|</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个错误表明函数体并不能适用于 <code>T</code> 的所有可能的类型，Rust 编译器也给出了解决建议：将泛型的类型指定为 <code>std::cmp::PartialOrd</code> ，它其实是一个 <code>trait</code> 。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">find_largest_value</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token class-name">PartialOrd</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> arr <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> i <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span>\n        largest <span class="token operator">=</span> i<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    largest\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result_1 <span class="token operator">=</span> <span class="token function">find_largest_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result_1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result_2 <span class="token operator">=</span> <span class="token function">find_largest_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result_2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将泛型的类型改为 <code>std::cmp::PartialOrd</code> 之后，就可以通过编译了。</p><h3 id="结构体中的泛型" tabindex="-1"><a class="header-anchor" href="#结构体中的泛型" aria-hidden="true">#</a> 结构体中的泛型</h3><p>结构体中的泛型，同样可以使用一个或多个泛型参数类型字段。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n  y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n  z<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段 <code>x</code> 、<code>y</code> 、<code>z</code> 都是相同类型，无论具体它是什么类型，如果尝试创建一个有不同类型值的 <code>Point&lt;T&gt;</code> 的实例，就不能通过编译：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n  y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n  z<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n    x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    y<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    z<span class="token punctuation">:</span> <span class="token number">4.0</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会出现类型不匹配的错误：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>error<span class="token punctuation">[</span><span class="token constant">E0308</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mismatched types\n  <span class="token operator">-</span><span class="token punctuation">-&gt;</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">8</span>\n   <span class="token operator">|</span>\n<span class="token number">11</span> <span class="token operator">|</span>     z<span class="token punctuation">:</span> <span class="token number">4.3</span>\n   <span class="token operator">|</span>        <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> expected integer<span class="token punctuation">,</span> found floating<span class="token operator">-</span>point number\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>但是非要定义一个有字段 <code>x</code>、 <code>y</code>、 <code>z</code> 的结构体，并且结构体中的字段可以存在多种类型，这怎么办？</p></blockquote><p>可以使用多个泛型类型参数来解决这个需求。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n  y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n  z<span class="token punctuation">:</span> <span class="token class-name">U</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n    x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    z<span class="token punctuation">:</span> <span class="token number">4.3</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;x: {}, y: {}, z: {}&quot;</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">,</span> point<span class="token punctuation">.</span>z<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果代码中需要很多泛型时，这可能表明你的代码需要重构分解成更小的结构。</p><h3 id="枚举中的泛型" tabindex="-1"><a class="header-anchor" href="#枚举中的泛型" aria-hidden="true">#</a> 枚举中的泛型</h3><p>和结构体类似，枚举也可以在成员中存放泛型数据类型。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token class-name">None</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Option&lt;T&gt;</code> 是一个拥有泛型的枚举，它有两个成员：<code>Some</code> ，它存放了一个类型 <code>T</code> 的值，和不存在任何值的 <code>None</code> 。</p><p>同样，枚举中的泛型也可以使用多个泛型类型参数。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Result</code> 枚举有两个泛型类型，<code>T</code> 和 <code>E</code>。<code>Result</code> 有两个成员：<code>Ok</code>，它存放一个类型 <code>T</code> 的值，而 <code>Err</code>则存放一个类型 <code>E</code> 的值。</p><h3 id="方法中的泛型" tabindex="-1"><a class="header-anchor" href="#方法中的泛型" aria-hidden="true">#</a> 方法中的泛型</h3><p>在为结构体或枚举实现方法时，也可以使用泛型。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n  y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">x</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>\n    <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>x\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n    x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    y<span class="token punctuation">:</span> <span class="token number">20</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  \n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;x: {}, y: {}&quot;</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意必须在 <code>impl</code> 后声明 <code>T</code> ，这样就可以在 <code>Point&lt;T&gt;</code> 上实现的方法中使用 <code>T</code> 了。在声明泛型类型参数的 <code>impl</code> 中编写的方法将会定义在该类型的任何实例上。</p>', 27);
const _hoisted_42 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n  y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">x</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>\n    <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>x\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 指定限制</span>\n<span class="token keyword">impl</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">p_x</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f64</span> <span class="token punctuation">{</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>y\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n    x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    y<span class="token punctuation">:</span> <span class="token number">20</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  \n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;x: {}, y: {}&quot;</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他 <code>T</code> 不是 <code>f64</code> 类型的 <code>Point&lt;T&gt;</code> 实例则没有定义 <code>p_x</code> 方法。</p>', 2);
const _hoisted_44 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token constant">TX</span><span class="token punctuation">,</span> <span class="token constant">TY</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">:</span> <span class="token constant">TX</span><span class="token punctuation">,</span>\n  y<span class="token punctuation">:</span> <span class="token constant">TY</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token constant">TX</span><span class="token punctuation">,</span> <span class="token constant">TY</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token constant">TX</span><span class="token punctuation">,</span> <span class="token constant">TY</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">difference</span><span class="token operator">&lt;</span><span class="token constant">TA</span><span class="token punctuation">,</span> <span class="token constant">TB</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token constant">TA</span><span class="token punctuation">,</span> <span class="token constant">TB</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token constant">TX</span><span class="token punctuation">,</span> <span class="token constant">TB</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n      x<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>\n      y<span class="token punctuation">:</span> other<span class="token punctuation">.</span>y<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> point_one <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> point_two <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token string">&quot;b&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> point_three <span class="token operator">=</span> point_one<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>point_two<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;point_three.x = {}, point_three.y = {}&quot;</span><span class="token punctuation">,</span> point_three<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point_three<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>point_one</code> 上以 <code>point_two</code> 作为参数调用 <code>difference</code> 会返回一个 <code>point_three</code> ，它会有一个 <code>i32</code> 类型的 <code>x</code> ，<code>char</code> 类型的 <code>y</code> ，<code>x</code> 来自 <code>point_one</code> ，<code>y</code> 来自 <code>point_two</code> 。泛型参数 <code>TA</code> 和 <code>TB</code> 声明于 <code>fn difference</code> 之后，因为它们只是相对于方法本身的。</p><h3 id="泛型的性能" tabindex="-1"><a class="header-anchor" href="#泛型的性能" aria-hidden="true">#</a> 泛型的性能</h3>', 3);
const _hoisted_47 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">6.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行单态化处理，编译器会读取 <code>Option&lt;T&gt;</code> 的值并发现有两种 <code>Option&lt;T&gt;</code> : 一个对应 <code>i32</code>，一个对应 <code>f64</code> 。单态化时，会将泛型定义 <code>Option&lt;T&gt;</code> 展开为两个针对 <code>i32</code> 和 <code>f64</code> 的定义，接着将泛型定义转换为这两个具体的定义。</p>', 2);
const _hoisted_49 = /* @__PURE__ */ createStaticVNode('<p>转换为以下单态化：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Option_i32</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token class-name">None</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">enum</span> <span class="token type-definition class-name">Option_f64</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token class-name">None</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token class-name">Option_i32</span><span class="token punctuation">::</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token class-name">Option_f64</span><span class="token punctuation">::</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">6.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型 <code>Option&lt;T&gt;</code> 转换为来具体的定义，Rust 会将每种情况下的泛型代码编译为具体类型，并且使用泛型没有运行时的开销。</p><p>单态化的过程，正是 Rust 泛型在运行时高效的原因。</p>', 4);
function _sfc_render(_ctx, _cache) {
  const _component_font = resolveComponent("font");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("泛型可以"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("高效处理重复概念")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("，在 Rust 中也存在着泛型（generics）的概念，"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("泛型是具体类型或其他属性的抽象替代")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_2,
    createBaseVNode("p", null, [
      createTextVNode("泛型允许我们"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("使用一个可以代表多种类型的占位符来替换特定类型")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("，依次来减少代码的冗余。")
    ]),
    _hoisted_3,
    createBaseVNode("p", null, [
      createTextVNode("当使用泛型定义函数时，"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("本来在函数签名中指定参数和返回值的类型的地方，会改用泛型来表示")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。采用泛型使得代码适应性更强，从而为函数的调用者提供更多的功能，同时也避免了代码的重复。")
    ]),
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("Rust 类型名的命名规范是首字母大写驼峰式命名法")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("，"),
    _hoisted_8,
    createTextVNode(' 作为 "type" 的缩写，大部分情况下是首选。'),
    _hoisted_9,
    createBaseVNode("p", null, [
      createTextVNode("对于泛型可以这样理解，抽象地认为它是函数的一个参数（类型参数），先有了泛型 "),
      _hoisted_12,
      createTextVNode(" ，所以你才可以在函数的形参、函数的返回值、函数体中使用 "),
      _hoisted_13,
      createTextVNode("。"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("类型参数声明位于函数名称与参数列表中间的尖括号 "),
          _hoisted_14,
          createTextVNode(" 中")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_15,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("定义方法时也可以为泛型指定限制")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode(" ，即增加一个额外的实现，来捕获泛型外的类型。"),
    _hoisted_42,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("结构体定义中的泛型类型参数并不总是与结构体方法签名中使用的泛型是同一种类型")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("。"),
    _hoisted_44,
    createBaseVNode("p", null, [
      createTextVNode("泛型并不会使程序比具体类型运行得慢。"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("Rust 通过在编译时进行泛型代码的单态化来保证效率")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。单态化是一个通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程。在这个过程中，编译器寻找所有泛型代码被调用的位置并使用泛型代码针对具体类型生成代码。")
    ]),
    _hoisted_47,
    createBaseVNode("p", null, [
      createTextVNode("也就是说"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("单态化其实就是将代码中的泛型进行单独处理，再将泛型定义转换为具体的定义")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_49
  ]);
}
const rustGenerics_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "rust-generics.html.vue"]]);
export {
  rustGenerics_html as default
};
