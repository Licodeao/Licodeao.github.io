import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, e as withCtx, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode(
  "h2",
  {
    id: "模式匹配",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#模式匹配",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 模式匹配")
  ],
  -1
  /* HOISTED */
);
const _hoisted_2 = /* @__PURE__ */ createBaseVNode(
  "h3",
  {
    id: "match-控制流结构",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#match-控制流结构",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" match 控制流结构")
  ],
  -1
  /* HOISTED */
);
const _hoisted_3 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "match",
  -1
  /* HOISTED */
);
const _hoisted_4 = /* @__PURE__ */ createStaticVNode('<p><strong>Rust 中的匹配是穷尽的，穷举到最后的可能性来使代码有效</strong>。</p><blockquote><p>为什么说它很强大？</p></blockquote><p>得益于编译器，<code>match</code> 确保了所有可能的情况都得到了处理。</p><p>整个 <code>match</code> 表达式像一个分类器，<code>match</code> 的每一个模式像一个管道一样，不同的值都会掉入符合大小的管道中，进入相关联的代码块并在执行中被使用。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">enum</span> <span class="token type-definition class-name">Apple</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HeavyApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">MiddleApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">LightApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">BadApple</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">fn</span> <span class="token function-definition function">classify_apple</span><span class="token punctuation">(</span>apple<span class="token punctuation">:</span> <span class="token class-name">Apple</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u8</span> <span class="token punctuation">{</span>\n    <span class="token keyword">match</span> apple <span class="token punctuation">{</span>\n      <span class="token class-name">Apple</span><span class="token punctuation">::</span><span class="token class-name">HeavyApple</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span>\n      <span class="token class-name">Apple</span><span class="token punctuation">::</span><span class="token class-name">MiddleApple</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      <span class="token class-name">Apple</span><span class="token punctuation">::</span><span class="token class-name">LightApple</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token class-name">Apple</span><span class="token punctuation">::</span><span class="token class-name">BadApple</span> <span class="token operator">=&gt;</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个分支相关联的代码是一个表达式，而表达式的结果值将作为整个 <code>match</code> 表达式的返回值。</p><p>如果分支代码较长，则需要使用大括号；较短时，则不需要使用大括号。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">enum</span> <span class="token type-definition class-name">Apple</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HeavyApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">MiddleApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">LightApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">BadApple</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">fn</span> <span class="token function-definition function">classify_apple</span><span class="token punctuation">(</span>apple<span class="token punctuation">:</span> <span class="token class-name">Apple</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u8</span> <span class="token punctuation">{</span>\n    <span class="token keyword">match</span> apple <span class="token punctuation">{</span>\n      <span class="token class-name">Apple</span><span class="token punctuation">::</span><span class="token class-name">HeavyApple</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;This is a heavy apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token number">3</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token class-name">Apple</span><span class="token punctuation">::</span><span class="token class-name">MiddleApple</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;This is a middle apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token number">2</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token class-name">Apple</span><span class="token punctuation">::</span><span class="token class-name">LightApple</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token class-name">Apple</span><span class="token punctuation">::</span><span class="token class-name">BadApple</span> <span class="token operator">=&gt;</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="绑定值的模式" tabindex="-1"><a class="header-anchor" href="#绑定值的模式" aria-hidden="true">#</a> 绑定值的模式</h4>', 9);
const _hoisted_13 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">enum</span> <span class="token type-definition class-name">Plate</span> <span class="token punctuation">{</span>\n    <span class="token class-name">BigPlate</span><span class="token punctuation">,</span>\n    <span class="token class-name">MiddlePlate</span><span class="token punctuation">,</span>\n    <span class="token class-name">SmallPlate</span><span class="token punctuation">,</span>\n    <span class="token class-name">GetApple</span><span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token attribute attr-name">#[derive(Debug)]</span>\n  <span class="token keyword">enum</span> <span class="token type-definition class-name">Apple</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HeavyApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">MiddleApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">LightApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">BadApple</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">fn</span> <span class="token function-definition function">classify_apple</span><span class="token punctuation">(</span>plate<span class="token punctuation">:</span> <span class="token class-name">Plate</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u8</span> <span class="token punctuation">{</span>\n    <span class="token keyword">match</span> plate <span class="token punctuation">{</span>\n      <span class="token class-name">Plate</span><span class="token punctuation">::</span><span class="token class-name">BigPlate</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;This is a big plate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token number">3</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token class-name">Plate</span><span class="token punctuation">::</span><span class="token class-name">MiddlePlate</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;This is a middle plate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token number">2</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token class-name">Plate</span><span class="token punctuation">::</span><span class="token class-name">SmallPlate</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token class-name">Plate</span><span class="token punctuation">::</span><span class="token class-name">GetApple</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Get the Apple is {:?}&quot;</span><span class="token punctuation">,</span> apple<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token number">0</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">classify_apple</span><span class="token punctuation">(</span><span class="token class-name">Plate</span><span class="token punctuation">::</span><span class="token class-name">GetApple</span><span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token punctuation">::</span><span class="token class-name">HeavyApple</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上方的代码中，我们在最后调用了 <code>classify_apple</code> 这个函数，并且匹配到了 <code>Plate::GetApple</code> 这个分支模式。在这个模式中，增加了一个变量 <code>apple</code> ，这个变量将会绑定 <code>Apple::HeavyApple</code> 这个枚举成员。这也就达到了从 <code>Plate</code> 枚举中提取到了值。</p><p>当然，最终的输出为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token class-name">Get</span> the <span class="token class-name">Apple</span> is <span class="token class-name">HeavyApple</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="匹配-option-t" tabindex="-1"><a class="header-anchor" href="#匹配-option-t" aria-hidden="true">#</a> 匹配 Option&lt;T&gt;</h4><p>匹配 <code>Option&lt;T&gt;</code> ，实际上比较的是 <code>Option&lt;T&gt;</code> 的成员。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">plus</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">match</span> x <span class="token punctuation">{</span>\n      <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token class-name">None</span><span class="token punctuation">,</span>\n      <span class="token class-name">Some</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> zero <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token function">plus</span><span class="token punctuation">(</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> none <span class="token operator">=</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;zero is {:?}, one is {:?}, none is {:?}&quot;</span><span class="token punctuation">,</span> zero<span class="token punctuation">,</span> one<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>zero is <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> one is <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> none is <span class="token class-name">None</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="匹配-some-t" tabindex="-1"><a class="header-anchor" href="#匹配-some-t" aria-hidden="true">#</a> 匹配 Some(T)</h4><p>在上方代码中，这两行代码表示：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> zero <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token function">plus</span><span class="token punctuation">(</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>plus</code> 函数中的 <code>x</code> 的值是 <code>Some(0)</code>，接着执行程序，其将与每个分支进行比较。</p><p>进入 <code>match</code> 表达式中，值 <code>Some(0)</code> 并不与 <code>None</code> 匹配，则进入下一个分支模式。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token class-name">Some</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Some(0)</code> 与 <code>Some(i)</code> 匹配成功，所以 <code>i</code> 绑定了 <code>0</code> ，值为 <code>0</code>。接着分支的代码被执行，将 <code>i</code> 的值加一并返回一个值为 <code>6</code> 的 新 <code>Some</code> 中。</p><p>接着执行程序，来到了这一行代码：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> none <span class="token operator">=</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行 <code>plus</code> 函数，进入 <code>match</code> 表达式</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token class-name">None</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>匹配成功，程序结束并返回 <code>=&gt;</code> 右侧的值 <code>None</code> ，其他分支将不再进行比较。</p><h4 id="通配模式" tabindex="-1"><a class="header-anchor" href="#通配模式" aria-hidden="true">#</a> 通配模式</h4>', 22);
const _hoisted_35 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> guess_number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">match</span> guess_number <span class="token punctuation">{</span>\n      <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;too small&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token number">8</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;so close&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      other <span class="token operator">=&gt;</span> <span class="token function">continue_guess</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">fn</span> <span class="token function-definition function">continue_guess</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;continue guess {}&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">continue</span> guess <span class="token number">10</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>', 3);
const _hoisted_38 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "-1",
  -1
  /* HOISTED */
);
const _hoisted_39 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "8",
  -1
  /* HOISTED */
);
const _hoisted_40 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "i32",
  -1
  /* HOISTED */
);
const _hoisted_41 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "match",
  -1
  /* HOISTED */
);
const _hoisted_42 = /* @__PURE__ */ createBaseVNode(
  "h4",
  {
    id: "占位模式",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#占位模式",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 占位模式")
  ],
  -1
  /* HOISTED */
);
const _hoisted_43 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "_",
  -1
  /* HOISTED */
);
const _hoisted_44 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> guess_number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">match</span> guess_number <span class="token punctuation">{</span>\n      <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;too small&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token number">8</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;so close&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      _ <span class="token operator">=&gt;</span> <span class="token function">continue_guess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    	<span class="token comment">// 或者直接返回一个空元组</span>\n      _ <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">fn</span> <span class="token function-definition function">continue_guess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;continue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-let-简洁控制流" tabindex="-1"><a class="header-anchor" href="#if-let-简洁控制流" aria-hidden="true">#</a> <code>if let</code> 简洁控制流</h3><p><code>if let</code> 是一种更短的控制流编写方式。</p><p>上方代码可以使用 <code>if let</code> 简化为以下代码：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> guess_number <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=</span> guess_number <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;num is {}&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>num is <span class="token number">10</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>if let</code> 语法获取通过等号分隔的一个模式和一个表达式。它的工作方式与 <code>match</code> 是完全一样的。</p><p>在这里，模式是 <code>Some(num)</code> ，表达式是 <code>guess_number</code>。</p><p>表达式对应的是 <code>match</code>，而模式对应的则是第一个分支。模式不匹配时，<code>if let</code> 块中的代码不会执行。</p><p><code>if let</code> 虽然简洁，但是会失去 <code>match</code> 强制要求的穷尽性检查。所以需要在使用时，去权衡利弊了。</p><p>可以在 <code>if let</code> 结构中添加一个 <code>else</code> ，对应着 <code>match</code> 中的 <code>_</code> 模式。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">enum</span> <span class="token type-definition class-name">Plate</span> <span class="token punctuation">{</span>\n    <span class="token class-name">BigPlate</span><span class="token punctuation">,</span>\n    <span class="token class-name">MiddlePlate</span><span class="token punctuation">,</span>\n    <span class="token class-name">SmallPlate</span><span class="token punctuation">,</span>\n    <span class="token class-name">GetApple</span><span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token attribute attr-name">#[derive(Debug)]</span>\n  <span class="token keyword">enum</span> <span class="token type-definition class-name">Apple</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HeavyApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">MiddleApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">LightApple</span><span class="token punctuation">,</span>\n    <span class="token class-name">BadApple</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">fn</span> <span class="token function-definition function">classify_apple</span><span class="token punctuation">(</span>plate<span class="token punctuation">:</span> <span class="token class-name">Plate</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> big_plate <span class="token operator">=</span> <span class="token class-name">Plate</span><span class="token punctuation">::</span><span class="token class-name">BigPlate</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> <span class="token keyword">mut</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Plate</span><span class="token punctuation">::</span><span class="token class-name">GetApple</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span> <span class="token operator">=</span> big_plate <span class="token punctuation">{</span>\n      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Get Apple is {:?}&quot;</span><span class="token punctuation">,</span> apple<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;num is {}&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">classify_apple</span><span class="token punctuation">(</span><span class="token class-name">Plate</span><span class="token punctuation">::</span><span class="token class-name">GetApple</span><span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token punctuation">::</span><span class="token class-name">HeavyApple</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>num is <span class="token number">1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当枚举包含数据时，可以根据需要处理多少的情况来选择使用 <code>match</code> 或 <code>if let</code> 来获取并使用这些值。</p>', 16);
function _sfc_render(_ctx, _cache) {
  const _component_font = resolveComponent("font");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    _hoisted_2,
    createBaseVNode("p", null, [
      createTextVNode("在 Rust 中"),
      _hoisted_3,
      createTextVNode(" 是一个极其强大的控制流运算符，它"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("允许我们将一个值和一系列的模式进行比较，并根据相匹配的模式执行相应代码")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_4,
    createBaseVNode("p", null, [
      createTextVNode("绑定匹配模式的部分值，也就是如何"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("从枚举成员中提取值")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_13,
    createBaseVNode("p", null, [
      createTextVNode("通配模式常用于"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("对一些特定的值采取特殊操作，对其他值采取默认操作")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("的场景。")
    ]),
    _hoisted_35,
    createBaseVNode("p", null, [
      createTextVNode("前两个分支涵盖了 "),
      _hoisted_38,
      createTextVNode(" 和 "),
      _hoisted_39,
      createTextVNode(" 的情况，最后一个分支涵盖了所有其他可能的值。即使没有枚举出 "),
      _hoisted_40,
      createTextVNode(" 所有可能的值，但是这段代码依然可以通过编译，因为"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("最后一个模式将匹配所有未被特殊列出的值，起到了兜底的作用")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。这种模式即是通配模式，它满足了 "),
      _hoisted_41,
      createTextVNode(" 必须被穷尽的要求。")
    ]),
    createBaseVNode("p", null, [
      createTextVNode("⚠️值得注意的是："),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("通配分支必须放在最后，否则 Rust 会警告通配分支之后的其他分支将永远不会被匹配到！")
        ]),
        _: 1
        /* STABLE */
      })
    ]),
    _hoisted_42,
    createBaseVNode("p", null, [
      createTextVNode("当不想使用通配模式获取值的时候，Rust 提供了另一个模式："),
      _hoisted_43,
      createTextVNode("，"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("这是一个特殊的模式，可以匹配任意值而不绑定到该值")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_44
  ]);
}
const rustPatternMatch_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "rust-pattern-match.html.vue"]]);
export {
  rustPatternMatch_html as default
};
