import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, e as withCtx, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h2><p><code>struct</code> 是一个自定义数据类型，允许你包装和命名多个相关的值，从而形成一个有意义的组合。</p><h3 id="定义和实例化" tabindex="-1"><a class="header-anchor" href="#定义和实例化" aria-hidden="true">#</a> 定义和实例化</h3><p>结构体的每一部分都可以是不同类型，不同于元组，结构体需要命名各部分数据以便能清楚的表明其意义，有了这些名字，结构体比元组更加灵活，不需要依赖顺序来指定或访问实例中的值。</p><p>定义结构体，需要使用 <code>struct</code> 关键字，并给整个结构体提供一个名字。接着需要在结构体中定义每一部分数据的名字和类型，这些数据称为字段（field）。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span>\n  username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n  gender<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n  is_active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 6);
const _hoisted_7 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token keyword">mut</span> user <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Licodeao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>\n    gender<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    is_active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用点号从结构体中获取特定的值，修改原有值时，该结构体实例必须是可变的，不能只是某个字段是可变的，要整体可变。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span>\n  username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n  gender<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n  is_active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token keyword">mut</span> user <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Licodeao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>\n    gender<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    is_active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  user<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;licodeao@gmail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n  user<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  user<span class="token punctuation">.</span>is_active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结构体</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">return_user</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token class-name">User</span> <span class="token punctuation">{</span>\n      username<span class="token punctuation">:</span> username<span class="token punctuation">,</span>\n      age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>\n      gender<span class="token punctuation">:</span> gender<span class="token punctuation">,</span>\n      is_active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> return_user <span class="token operator">=</span> <span class="token function">return_user</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Licodeao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Username: {}&quot;</span><span class="token punctuation">,</span> return_user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段初始化简写语法（field in shorthand）</p><p>（与 ES6 中对象增强中的属性增强简直一模一样...）</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">return_user</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token class-name">User</span> <span class="token punctuation">{</span>\n      username<span class="token punctuation">,</span>\n      age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>\n      gender<span class="token punctuation">,</span>\n      is_active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> return_user <span class="token operator">=</span> <span class="token function">return_user</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Licodeao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Username: {}&quot;</span><span class="token punctuation">,</span> return_user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建新实例" tabindex="-1"><a class="header-anchor" href="#创建新实例" aria-hidden="true">#</a> 创建新实例</h3>', 9);
const _hoisted_16 = /* @__PURE__ */ createStaticVNode('<p>（与 ES6 中的扩展运算符简直一模一样，只是少了个点...）</p><p><code>..</code> 语法指定了剩余未显式设置值的字段应有与给定实例对应字段相同的值。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span>\n  username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n  gender<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>\n  is_active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Licodeao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>\n    gender<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    is_active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> user2 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;licodeao@gmail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token comment">// 结构体更新语法</span>\n    <span class="token punctuation">..</span>user\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;User2: {}&quot;</span><span class="token punctuation">,</span> user2<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️：结构更新语法就像带有 <code>=</code> 的赋值，因为它移动了数据，总体上说我们在创建 <code>user2</code> 后不能就再使用 <code>user1</code> 了</p><h3 id="没有命名的元组结构体" tabindex="-1"><a class="header-anchor" href="#没有命名的元组结构体" aria-hidden="true">#</a> 没有命名的元组结构体</h3><p>定义与元组类似的结构体，称为元组结构体。元组结构体有结构体名称，但是没有具体的字段名，只有字段类型。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Color</span><span class="token punctuation">(</span><span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> red <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> origin <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="没有任何字段的类单元结构体" tabindex="-1"><a class="header-anchor" href="#没有任何字段的类单元结构体" aria-hidden="true">#</a> 没有任何字段的类单元结构体</h3><p>定义一个没有任何字段的结构体，称为类单元结构体（unit-like structs），因为它类似于 <code>()</code> 。</p><p>类单元结构体常常在你想要在某个类型上实现 <code>trait</code> ，但不需要在类型中存储数据时发挥作用。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">UnitLikeStruct</span><span class="token punctuation">;</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> unit_like_struct <span class="token operator">=</span> <span class="token class-name">UnitLikeStruct</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体中的所有权" tabindex="-1"><a class="header-anchor" href="#结构体中的所有权" aria-hidden="true">#</a> 结构体中的所有权</h3><p>当结构体中存储被其他对象拥有的数据的引用时，需要用上生命周期（lifetimes）。</p><p>如果尝试在结构体中存储一个引用而不指定生命周期，这将会是无效的。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span>\n    active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n    username<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>\n    email<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>\n    sign_in_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        username<span class="token punctuation">:</span> <span class="token string">&quot;LICODEAO&quot;</span><span class="token punctuation">,</span>\n        email<span class="token punctuation">:</span> <span class="token string">&quot;licodeao@gmail.com&quot;</span><span class="token punctuation">,</span>\n        sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会出现以下错误：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code> <span class="token operator">-</span><span class="token punctuation">-&gt;</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">13</span>\n  <span class="token operator">|</span>\n<span class="token number">3</span> <span class="token operator">|</span>   username<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>\n  <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>             <span class="token operator">^</span> expected named lifetime parameter\n  <span class="token closure-punctuation punctuation">|</span></span>\nhelp<span class="token punctuation">:</span> consider introducing a named lifetime parameter\n  <span class="token operator">|</span>\n<span class="token number">1</span> ~ <span class="token keyword">struct</span> <span class="token type-definition class-name">User</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n<span class="token number">2</span> <span class="token operator">|</span>   active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n<span class="token number">3</span> ~   username<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span>\n  <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>\n\nerror<span class="token punctuation">[</span><span class="token constant">E0106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> missing lifetime specifier\n <span class="token operator">-</span><span class="token punctuation">-&gt;</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">10</span>\n  <span class="token closure-punctuation punctuation">|</span></span>\n<span class="token number">4</span> <span class="token operator">|</span>   email<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>\n  <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>          <span class="token operator">^</span> expected named lifetime parameter\n  <span class="token closure-punctuation punctuation">|</span></span>\nhelp<span class="token punctuation">:</span> consider introducing a named lifetime parameter\n  <span class="token operator">|</span>\n<span class="token number">1</span> ~ <span class="token keyword">struct</span> <span class="token type-definition class-name">User</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n<span class="token number">2</span> <span class="token operator">|</span>   active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n<span class="token number">3</span> <span class="token operator">|</span>   username<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>\n<span class="token number">4</span> ~   email<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span>\n  <span class="token operator">|</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会提示它需要生命周期标识符...</p><h3 id="打印结构体" tabindex="-1"><a class="header-anchor" href="#打印结构体" aria-hidden="true">#</a> 打印结构体</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">{</span>\n  width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n  height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> rect1 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n      width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n      height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;rect1 is {}&quot;</span><span class="token punctuation">,</span> rect1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上方代码后，会出现以下问题：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>error<span class="token punctuation">[</span><span class="token constant">E0277</span><span class="token punctuation">]</span><span class="token punctuation">:</span> `<span class="token class-name">Rectangle</span>` doesn<span class="token lifetime-annotation symbol">&#39;t</span> implement `<span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>println!</code> 宏能处理很多类型的格式，不过 <code>{}</code> 告诉 <code>println!</code> 宏使用被称为 <code>Display</code> 的格式，它像用户展示 <code>1</code> 或其他任何基本类型的唯一方式。不过对于结构体，<code>println!</code> 并没有提供一个 <code>Display</code></p><p>在 <code>{}</code> 中加入 <code>:?</code> 提示符告诉 <code>println!</code> 使用 <code>Debug</code> 的输出格式，<code>Debug</code> 是一个 <code>trait</code>，必须显式地为结构体标注要使用 <code>Debug</code></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 增加外部属性来派生 Debug trait</span>\n<span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">{</span>\n  width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n  height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> rect1 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n      width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n      height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;rect1 is {:?}&quot;</span><span class="token punctuation">,</span> rect1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rect1 is Rectangle { width: 30, height: 50 }</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>{:#?}</code> 替换 <code>{:?}</code> ，能够看到更漂亮和易读的输出</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">{</span>\n  width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n  height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> rect1 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n      width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n      height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;rect1 is {:#?}&quot;</span><span class="token punctuation">,</span> rect1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>rect1 is <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n    width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n    height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法语法" tabindex="-1"><a class="header-anchor" href="#方法语法" aria-hidden="true">#</a> 方法语法</h3><p>方法与函数类似：都可以使用 <code>fn</code> 关键字和名称声明，并且可以拥有参数和返回值，同时包含在某处调用时会执行的代码。</p><p>方法与函数不同的是：方法在结构体的上下文、枚举、<code>trait</code> 对象中被定义，并且它们第一个参数永远是 <code>self</code> ，它代表调用该方法的结构体实例。</p><blockquote><p>定义方法</p></blockquote><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">{</span>\n  width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n  height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 方法语法，self 指向 rect1这个结构体实例</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span>\n      <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> rect1 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n      width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n      height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;rect1 is {:?}&quot;</span><span class="token punctuation">,</span> rect1<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>&amp;self</code> 来替代 <code>rectangle: &amp;Rectangle</code> ，<code>&amp;self</code> 实际上是 <code>self: &amp;Self</code> 的缩写。</p><p>在一个 <code>impl</code> 块中，<code>Self</code> 类型是 <code>impl</code> 块的类型的别名。方法的第一个参数必须有一个名为 <code>self</code> 的 <code>Self</code> 类型的参数。</p>', 35);
const _hoisted_51 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>\n<span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">{</span>\n  width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n  height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">width</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">&gt;</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> rect1 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n      width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>\n      height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> rect1<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;rect1 width is {:?}&quot;</span><span class="token punctuation">,</span> rect1<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在 <code>rect1.width</code> 后面加上括号时，Rust 知道指的是方法 <code>width</code>；当不使用圆括号时，Rust 知道指的是字段 <code>width</code></p><p>与字段同名的方法将被定义为只返回字段中的值，而不做其他事情，这样的方法被称为 <code>getters</code></p><h3 id="关联函数" tabindex="-1"><a class="header-anchor" href="#关联函数" aria-hidden="true">#</a> 关联函数</h3><p>所有在 <code>impl</code> 块中定义的函数被称为关联函数，因为它们与 <code>impl</code> 后面命名的类型相关。</p><p>可以定义不以 <code>self</code> 为第一个参数的关联函数，因此它不是一个方法，因为它并不作用于一个结构体实例。</p>', 6);
const _hoisted_57 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">square</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n    <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n      width<span class="token punctuation">:</span> size<span class="token punctuation">,</span>\n      height<span class="token punctuation">:</span> size<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键字 <code>Self</code> 在函数的返回类型中代指在 <code>impl</code> 关键字后出现的类型，这里指的是 <code>Rectangle</code> ，即 <code>Self</code> 指的是 <code>Rectangle</code></p><p>使用结构体和 <code>::</code> 来调用这个关联函数，如 <code>Rectangle::square(6)</code></p><h3 id="多个-impl-块" tabindex="-1"><a class="header-anchor" href="#多个-impl-块" aria-hidden="true">#</a> 多个 <code>impl</code> 块</h3><p>每个结构体都允许有多个 <code>impl</code> 块。</p><p>每个方法有其自己的 <code>impl</code> 块。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Rectangle</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>height\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用结构体能够方便地组装数据，使得代码更加清晰，但结构体并不是创建自定义类型的唯一方法，还可以使用枚举。</p>', 8);
function _sfc_render(_ctx, _cache) {
  const _component_font = resolveComponent("font");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("定义好结构体后，"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("通过为每个字段指定具体值来创建这个结构体的实例。实例中字段的顺序不需要和它们在结构体中声明的顺序一致")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_7,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("通过结构体创建新的实例，除了使用旧实例的大部分值但是改变其部分值来创建，还可以通过结构体更新语法（struct update syntax）")
      ]),
      _: 1
      /* STABLE */
    }),
    _hoisted_16,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("方法可以与字段同名")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("："),
    _hoisted_51,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("不是方法的关联函数经常被用作返回一个结构体新实例的构造函数")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("。"),
    _hoisted_57
  ]);
}
const rustStruct_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "rust-struct.html.vue"]]);
export {
  rustStruct_html as default
};
