import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="_146-lru缓存" tabindex="-1"><a class="header-anchor" href="#_146-lru缓存" aria-hidden="true">#</a> 146. LRU缓存</h2><p>请你设计并实现一个满足 LRU (最近最少使用) 缓存约束的数据结构。</p><p>实现 <code>LRUCache</code> 类：</p><ul><li><code>LRUCache(int capacity)</code> 以 <strong>正整数</strong> 作为容量 <code>capacity</code> 初始化 LRU 缓存</li><li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code> 如果关键字 <code>key</code> 已经存在，则变更其数据值 <code>value</code> ；如果不存在，则向缓存中插入该组 <code>key-value</code> 。如果插入操作导致关键字数量超过 <code>capacity</code> ，则应该 <strong>逐出</strong> 最久未使用的关键字。</li></ul><p>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code> 的平均时间复杂度运行。</p><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入\n[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n输出\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n解释\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // 缓存是 {1=1}\nlRUCache.put(2, 2); // 缓存是 {1=1, 2=2}\nlRUCache.get(1);    // 返回 1\nlRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\nlRUCache.get(2);    // 返回 -1 (未找到)\nlRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\nlRUCache.get(1);    // 返回 -1 (未找到)\nlRUCache.get(3);    // 返回 3\nlRUCache.get(4);    // 返回 4\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= capacity &lt;= 3000</code></li><li><code>0 &lt;= key &lt;= 10000</code></li><li><code>0 &lt;= value &lt;= 105</code></li><li>最多调用 <code>2 * 105</code> 次 <code>get</code> 和 <code>put</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>', 10);
const _hoisted_11 = {
  href: "https://baike.baidu.com/item/LRU",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_12 = /* @__PURE__ */ createStaticVNode('<p>思路：单链表</p><ul><li>put操作： <ul><li>如果节点不存在，直接把节点插入到头部</li><li>如果节点存在，则把这个节点从链表中删除，并且更新值再插入到头部</li><li>如果插入时，超过最大容量，则将链表的最后一个节点删除，并且将新节点插入到头部</li></ul></li><li>get操作： <ul><li>如果节点存在，则返回，并且将节点删除以及插入到链表头部</li><li>如果节点不存在，则直接返回-1，没有额外操作</li></ul></li><li>该方法下，put和get操作的时间复杂度都为O(n)，并不符合题目所要求的O(1)</li><li>那么，如何优化？ <ul><li>加哈希表，省去get操作遍历的过程；但实际上，时间复杂度还是O(n)。 <ul><li>为什么？ <ul><li>因为不管是put操作还是get操作，都有删除操作，虽然加入哈希表能够省去遍历的过程，但是不能优化删除操作。删除节点需要找到其前驱节点，那么这个寻找前驱节点的过程也需要O(n)的时间复杂度。</li></ul></li><li>如何省去寻找节点的前驱节点这个过程呢？ <ul><li>可以使用双向链表，从而节点本身就包含了其前驱节点和后驱节点的信息，不用再去寻找了，以此达到O(1)的要求。</li></ul></li></ul></li><li>双向链表 + 哈希表（最终的解决方案）</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//双向链表的单个节点</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value\n        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//指向后一个节点</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//指向前一个节点</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">capacity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity <span class="token comment">//容量</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>hashTable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//存放键值对信息</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//键值对数量</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//dummy头节点 方便在链表从开始的地方插入</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dummyTail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">//dummy尾节点 方便在链表从末尾删除</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dummyHead<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dummyTail <span class="token comment">//dummyHead和dummyTail相互连接</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dummyTail<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dummyHead\n    <span class="token punctuation">}</span>\n\n    <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token comment">//查找哈希表中的键值对</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">//不存在该键值对 返回-1</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token comment">//移动到链表头</span>\n        <span class="token keyword">return</span> node<span class="token punctuation">.</span>value\n    <span class="token punctuation">}</span>\n\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">//哈希表中查找该键值对</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token comment">//不存在就创建节点</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>hashTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newNode <span class="token comment">//加入哈希表</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addToHead</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span> <span class="token comment">//加入链表头</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token comment">//节点数+1</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//超过容量 从队尾删除一个</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeLRUItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value <span class="token comment">//键值对存在于哈希表中 就更新</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token comment">//移动到队头</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">moveToHead</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeFromList</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token comment">//从链表中删除节点</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token comment">//将该节点添加到链表头</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">removeFromList</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//删除的指针操作</span>\n        <span class="token keyword">let</span> tempForPrev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev\n        <span class="token keyword">let</span> tempForNext <span class="token operator">=</span> node<span class="token punctuation">.</span>next\n        tempForPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> tempForNext\n        tempForNext<span class="token punctuation">.</span>prev <span class="token operator">=</span> tempForPrev\n    <span class="token punctuation">}</span>\n\n    <span class="token function">addToHead</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//加入链表头的指针操作</span>\n        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dummyHead\n        node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dummyHead<span class="token punctuation">.</span>next\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node\n        <span class="token keyword">this</span><span class="token punctuation">.</span>dummyHead<span class="token punctuation">.</span>next <span class="token operator">=</span> node\n    <span class="token punctuation">}</span>\n\n    <span class="token function">removeLRUItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">popTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//从链表中删除</span>\n        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashTable<span class="token punctuation">[</span>tail<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token comment">//从哈希表中删除</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">popTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> tailItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dummyTail<span class="token punctuation">.</span>prev<span class="token comment">//通过dummyTail拿到最后一个节点 然后删除</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeFromList</span><span class="token punctuation">(</span>tailItem<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> tailItem\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">DoubleSide</span> <span class="token punctuation">{</span>\n    key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    next<span class="token operator">:</span> DoubleSide<span class="token punctuation">;</span>\n    prev<span class="token operator">:</span> DoubleSide<span class="token punctuation">;</span>\n\n    <span class="token comment">// 双向链表的单个节点</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value\n        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//指向后一个节点</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//指向前一个节点</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 哈希表</span>\n    hash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token comment">// 容量</span>\n    capacity<span class="token operator">:</span> <span class="token builtin">number</span>\n    <span class="token comment">// 真实大小</span>\n    size<span class="token operator">:</span> <span class="token builtin">number</span>\n    <span class="token comment">// 头指针</span>\n    head<span class="token operator">:</span> DoubleSide<span class="token punctuation">;</span>\n    <span class="token comment">// 尾指针(用来删除最后一个节点)</span>\n    tail<span class="token operator">:</span> DoubleSide<span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>capacity<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity\n        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token comment">// 虚拟头结点(方便删除)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleSide</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token comment">// 虚拟尾节点(方便删除)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleSide</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>\n        <span class="token comment">// 组成双向链表</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail\n        <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head\n    <span class="token punctuation">}</span>\n\n    <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 判断节点是否存在</span>\n        <span class="token keyword">let</span> temp<span class="token operator">:</span> DoubleSide <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n        <span class="token comment">// 如果存在，则删除</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 删除节点</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>\n            <span class="token comment">// 插入到头部</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertHead</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>\n\n            <span class="token keyword">return</span> temp<span class="token punctuation">.</span>value\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 不存在</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 判断节点是否存在</span>\n        <span class="token keyword">let</span> temp<span class="token operator">:</span> DoubleSide <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n        <span class="token comment">// 如果存在，删除并插入头部</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 删除</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>\n            <span class="token comment">// 更新值并插入头部</span>\n            temp<span class="token punctuation">.</span>value <span class="token operator">=</span> value\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertHead</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 如果不存在，直接插入头部</span>\n        <span class="token keyword">let</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleSide</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertHead</span><span class="token punctuation">(</span>newHead<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">++</span>\n        <span class="token comment">// 判断大小是否超过容量，超过则删除尾节点</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 最后一个节点</span>\n            <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span>\n            <span class="token comment">// hash表中清除这个key</span>\n            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hash<span class="token punctuation">[</span>last<span class="token punctuation">.</span>key<span class="token punctuation">]</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">--</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 删除节点</span>\n    <span class="token function">deleteNode</span><span class="token punctuation">(</span>temp<span class="token operator">:</span> DoubleSide<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> tempForPrev <span class="token operator">=</span> temp<span class="token punctuation">.</span>prev\n        <span class="token keyword">let</span> tempForNext <span class="token operator">=</span> temp<span class="token punctuation">.</span>next\n        tempForPrev<span class="token punctuation">.</span>next <span class="token operator">=</span> tempForNext\n        tempForNext<span class="token punctuation">.</span>prev <span class="token operator">=</span> tempForPrev\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">// 插入到头部</span>\n    <span class="token function">insertHead</span><span class="token punctuation">(</span>temp<span class="token operator">:</span> DoubleSide<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 先与后驱节点连接</span>\n        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next\n        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> temp\n        <span class="token comment">// 与head连接</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> temp\n        temp<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 4);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_11, [
        createTextVNode("什么是LRU？"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_12
  ]);
}
const leetcode146_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "leetcode-146.html.vue"]]);
export {
  leetcode146_html as default
};
