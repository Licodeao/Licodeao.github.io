import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, e as withCtx, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode(
  "h2",
  {
    id: "自动化测试",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#自动化测试",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 自动化测试")
  ],
  -1
  /* HOISTED */
);
const _hoisted_2 = /* @__PURE__ */ createBaseVNode(
  "h3",
  {
    id: "如何编写测试",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#如何编写测试",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(" 如何编写测试")
  ],
  -1
  /* HOISTED */
);
const _hoisted_3 = /* @__PURE__ */ createBaseVNode(
  "p",
  null,
  "测试函数体通常执行三种操作：",
  -1
  /* HOISTED */
);
const _hoisted_4 = /* @__PURE__ */ createBaseVNode(
  "ul",
  null,
  [
    /* @__PURE__ */ createBaseVNode("li", null, "设置所需的数据或状态"),
    /* @__PURE__ */ createBaseVNode("li", null, "运行需要测试的代码"),
    /* @__PURE__ */ createBaseVNode("li", null, "断言其结果是我们所期望的")
  ],
  -1
  /* HOISTED */
);
const _hoisted_5 = /* @__PURE__ */ createBaseVNode(
  "h4",
  {
    id: "test-属性注解",
    tabindex: "-1"
  },
  [
    /* @__PURE__ */ createBaseVNode("a", {
      class: "header-anchor",
      href: "#test-属性注解",
      "aria-hidden": "true"
    }, "#"),
    /* @__PURE__ */ createTextVNode(),
    /* @__PURE__ */ createBaseVNode("code", null, "test"),
    /* @__PURE__ */ createTextVNode(" 属性注解")
  ],
  -1
  /* HOISTED */
);
const _hoisted_6 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "fn",
  -1
  /* HOISTED */
);
const _hoisted_7 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "#[test]",
  -1
  /* HOISTED */
);
const _hoisted_8 = /* @__PURE__ */ createStaticVNode('<p>使用 <code>cargo test</code> 命令运行测试时，Rust 会构建一个测试执行程序用来调用被标注的函数，并报告每一个测试函数是通过还是失败。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 注意是 lib.rs，而不能在 main.rs 中</span>\n\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n  <span class="token attribute attr-name">#[test]</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">66</span> <span class="token operator">+</span> <span class="token number">66</span><span class="token punctuation">;</span>\n    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cargo test</code> 命令运行后，输出为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">1</span> test\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>testing <span class="token punctuation">...</span> ok <span class="token comment">// test tests 模块下的 testing 测试函数，测试结果为 ok</span>\n\n<span class="token comment">// test result 代表所有测试都通过了，1 passed; 0 failed 表示通过或失败的测试数量</span>\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n	 <span class="token comment">// 所有文档测试的结果，Rust 会编译任何在 API 文档中的代码示例，使文档和代码保持同步</span>\n   <span class="token class-name">Doc</span><span class="token operator">-</span>tests adder\n\nrunning <span class="token number">0</span> tests\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">0</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次使用 <code>Cargo</code> 新建一个库项目时，它会自动为我们生成一个测试模块和测试函数，这个模块提供了一个编写测试的模板。</p><p>使用 <code>cargo new project_name --lib</code> 命令新建一个库项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> new test_lib <span class="token parameter variable">--lib</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在生成的 <code>lib.rs</code> 文件中，可以看见自动生成的测试模块和测试函数：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 自动生成的测试函数</span>\n<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>\n    left <span class="token operator">+</span> right\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 自动生成的测试模块</span>\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">it_works</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在自动生成的测试模块中，函数体通过使用 <code>assert_eq!</code> 宏来断言 <code>2 + 2 = 4</code>。</p><p>当测试函数中出现了 <code>panic</code> 时测试就失败了，每一个测试都在一个新线程中运行，当主线程发现测试线程异常了，将对应测试标记为失败。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>\n    left <span class="token operator">+</span> right\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n  	<span class="token comment">// 这是一个内部的模块，要测试外部模块中的代码，需要将其引入到内部模块的作用域中</span>\n    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">it_works</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;This is panic!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cargo test</code> 命令运行后，输出：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">2</span> tests\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>it_works <span class="token punctuation">...</span> ok\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>error <span class="token punctuation">...</span> <span class="token constant">FAILED</span>\n\nfailures<span class="token punctuation">:</span>\n\n<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token namespace">tests<span class="token punctuation">::</span></span>error stdout <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>\nthread <span class="token lifetime-annotation symbol">&#39;tests</span><span class="token punctuation">::</span>error&#39; panicked at src<span class="token operator">/</span>lib<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span>\n<span class="token class-name">This</span> is <span class="token macro property">panic!</span>\nnote<span class="token punctuation">:</span> run with `<span class="token constant">RUST_BACKTRACE</span><span class="token operator">=</span><span class="token number">1</span>` environment variable to display a backtrace\n\n\nfailures<span class="token punctuation">:</span>\n    <span class="token namespace">tests<span class="token punctuation">::</span></span>error\n\ntest result<span class="token punctuation">:</span> <span class="token constant">FAILED</span><span class="token punctuation">.</span> <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">1</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在单独的测试结果和摘要之间多了两个新的部分：第一个部分显示测试失败详细的错误原因，第二个部分列出了所有失败的测试。</p><h4 id="assert-宏" tabindex="-1"><a class="header-anchor" href="#assert-宏" aria-hidden="true">#</a> <code>assert!</code> 宏</h4><p><code>assert!</code> 宏由标准库提供，<code>assert!</code> 宏接受一个布尔值参数，它可以用来检查结果。如果值是 <code>true</code>，<code>assert!</code> 宏什么也不做，同时测试会通过；如果值为 <code>false</code> ，<code>assert!</code> 宏会调用 <code>panic!</code> 宏，导致测试失败。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="assert-eq-宏和-assert-ne-宏" tabindex="-1"><a class="header-anchor" href="#assert-eq-宏和-assert-ne-宏" aria-hidden="true">#</a> <code>assert_eq!</code> 宏和 <code>assert_ne!</code> 宏</h4><p>使用 <code>assert_eq!</code> 宏和 <code>assert_ne!</code> 宏来测试相等与不相等，将需要测试的代码值与期望值进行比较，并检查是否相等与不相等。</p><ul><li><code>assert_eq!</code> 宏用于测试是否相等</li><li><code>assert_ne!</code> 宏用于测试是否不相等</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>\n  x <span class="token operator">+</span> y\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n  <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n  <span class="token attribute attr-name">#[test]</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">test_assert_eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token attribute attr-name">#[test]</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">test_assert_ne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cargo test</code> 命令运行后，输出为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">2</span> tests\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>test_assert_ne <span class="token punctuation">...</span> ok\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>test_assert_eq <span class="token punctuation">...</span> ok\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">2</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n\n   <span class="token class-name">Doc</span><span class="token operator">-</span>tests test_lib\n\nrunning <span class="token number">0</span> tests\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">0</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到两个测试函数都通过了，<code>assert_eq!</code> 宏用于测试是否相等，如果相等就返回 <code>true</code> ；<code>assert_ne!</code> 宏用于测试是否不相等，如果不相等就返回 <code>true</code> 。</p><p>看看 <code>assert_eq!</code> 宏报错会输出什么：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>\n    x <span class="token operator">+</span> y\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">test_assert_eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      	<span class="token comment">// 改变了 assert_eq! 的输入参数</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">test_assert_ne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">2</span> tests\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>test_assert_ne <span class="token punctuation">...</span> ok\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>test_assert_eq <span class="token punctuation">...</span> <span class="token constant">FAILED</span>\n\nfailures<span class="token punctuation">:</span>\n\n<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token namespace">tests<span class="token punctuation">::</span></span>test_assert_eq stdout <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>\nthread <span class="token lifetime-annotation symbol">&#39;tests</span><span class="token punctuation">::</span>test_assert_eq&#39; panicked at src<span class="token operator">/</span>lib<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span>\nassertion `left <span class="token operator">==</span> right` failed\n  left<span class="token punctuation">:</span> <span class="token number">10</span>\n right<span class="token punctuation">:</span> <span class="token number">11</span>\nnote<span class="token punctuation">:</span> run with `<span class="token constant">RUST_BACKTRACE</span><span class="token operator">=</span><span class="token number">1</span>` environment variable to display a backtrace\n\n\nfailures<span class="token punctuation">:</span>\n    <span class="token namespace">tests<span class="token punctuation">::</span></span>test_assert_eq\n\ntest result<span class="token punctuation">:</span> <span class="token constant">FAILED</span><span class="token punctuation">.</span> <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">1</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在错误提示中出现了 <code>left === right</code> ，并且 <code>left</code> 和 <code>right</code> 的值分别为 <code>10</code> 和 <code>11</code> ，并不相等，所以报错了。在其他编程语言里，断言两个值相等的函数的参数被称为 <code>expected</code> 和 <code>actual</code> ，在 Rust 中，它们被称为 <code>left</code> 和 <code>right</code> ，指定期望的值和被测试代码产生的值的顺序并不重要。</p>', 29);
const _hoisted_37 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "assert_eq!",
  -1
  /* HOISTED */
);
const _hoisted_38 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "assert_ne!",
  -1
  /* HOISTED */
);
const _hoisted_39 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "==",
  -1
  /* HOISTED */
);
const _hoisted_40 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "!=",
  -1
  /* HOISTED */
);
const _hoisted_41 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "PartialEq",
  -1
  /* HOISTED */
);
const _hoisted_42 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "Debug trait",
  -1
  /* HOISTED */
);
const _hoisted_43 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "PartialEq",
  -1
  /* HOISTED */
);
const _hoisted_44 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "Debug trait",
  -1
  /* HOISTED */
);
const _hoisted_45 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "#[derive(PartialEq, Debug)]",
  -1
  /* HOISTED */
);
const _hoisted_46 = /* @__PURE__ */ createStaticVNode('<h4 id="should-panic-宏" tabindex="-1"><a class="header-anchor" href="#should-panic-宏" aria-hidden="true">#</a> <code>should_panic!</code> 宏</h4><p><code>should_panic!</code> 宏用于检查代码是否按照期望处理错误，可以对函数增加一个属性 <code>should_panic</code> 来实现这些，这个属性会在函数 <code>panic</code> 时通过，没有 <code>panic</code> 时失败。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span>\n    age<span class="token punctuation">:</span> <span class="token keyword">i32</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Age cannot be negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">Person</span> <span class="token punctuation">{</span> age <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token attribute attr-name">#[should_panic]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cargo test</code> 命令运行后，输出为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">1</span> test\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>testing <span class="token operator">-</span> should panic <span class="token punctuation">...</span> ok\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n\n   <span class="token class-name">Doc</span><span class="token operator">-</span>tests test_lib\n\nrunning <span class="token number">0</span> tests\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">0</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在代码中，当 <code>age</code> 小于 0 时会出现 <code>panic</code> ，并且在测试函数上添加了 <code>#[should_panic]</code> 注解，所以测试通过。</p><p>为了使用 <code>should_panic</code> 测试结果更加精确，可以给它添加一个可选的 <code>expected</code> 参数。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span>\n    age<span class="token punctuation">:</span> <span class="token keyword">i32</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Age cannot be negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">Person</span> <span class="token punctuation">{</span> age <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token attribute attr-name">#[should_panic(expected = <span class="token string">&quot;less than zero&quot;</span>)]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Person</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次运行就会报错了：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">1</span> test\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>testing <span class="token operator">-</span> should panic <span class="token punctuation">...</span> <span class="token constant">FAILED</span>\n\nfailures<span class="token punctuation">:</span>\n\n<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token namespace">tests<span class="token punctuation">::</span></span>testing stdout <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>\nthread <span class="token lifetime-annotation symbol">&#39;tests</span><span class="token punctuation">::</span>testing&#39; panicked at src<span class="token operator">/</span>lib<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">:</span>\n<span class="token class-name">Age</span> cannot be negative\nnote<span class="token punctuation">:</span> run with `<span class="token constant">RUST_BACKTRACE</span><span class="token operator">=</span><span class="token number">1</span>` environment variable to display a backtrace\nnote<span class="token punctuation">:</span> panic did not contain expected string\n      panic message<span class="token punctuation">:</span> `<span class="token string">&quot;Age cannot be negative&quot;</span>`<span class="token punctuation">,</span>\n expected substring<span class="token punctuation">:</span> `<span class="token string">&quot;less than zero&quot;</span>`\n\nfailures<span class="token punctuation">:</span>\n    <span class="token namespace">tests<span class="token punctuation">::</span></span>testing\n\ntest result<span class="token punctuation">:</span> <span class="token constant">FAILED</span><span class="token punctuation">.</span> <span class="token number">0</span> passed<span class="token punctuation">;</span> <span class="token number">1</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="result-t-e-避免-panic" tabindex="-1"><a class="header-anchor" href="#result-t-e-避免-panic" aria-hidden="true">#</a> <code>Result&lt;T, E&gt;</code> 避免 <code>panic</code></h4><p>上面编写的测试在出错时都会出现 <code>panic</code> ，也可以使用 <code>Result&lt;T, E&gt;</code> 来编写测试。使用 <code>Result&lt;T, E&gt;</code> 重写，可以避免在失败时返回 <code>panic</code> 而是返回 <code>Err</code>。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">6</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;less than zero from Err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">1</span> test\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>testing <span class="token punctuation">...</span> ok\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n\n   <span class="token class-name">Doc</span><span class="token operator">-</span>tests test_lib\n\nrunning <span class="token number">0</span> tests\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">0</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 ⚠️：不能对 <code>Result&lt;T, E&gt;</code> 使用 <code>#[should_panic]</code> 注解。</p><h3 id="控制测试如何运行" tabindex="-1"><a class="header-anchor" href="#控制测试如何运行" aria-hidden="true">#</a> 控制测试如何运行</h3><p><code>cargo test</code> 在测试模式下编译代码并运行生成的测试二进制文件，<code>cargo test</code> 产生的二进制文件的默认行为是并发运行所有测试，并截获测试中产生的输出，阻止它们显示出来。不过可以指定命令行参数来改变 <code>cargo test</code> 的默认行为。</p><h4 id="并行或连续的运行测试" tabindex="-1"><a class="header-anchor" href="#并行或连续的运行测试" aria-hidden="true">#</a> 并行或连续的运行测试</h4>', 19);
const _hoisted_65 = /* @__PURE__ */ createStaticVNode('<p>如果不想测试是并行运行的，或者想要更加准确地控制线程的数量。可以传递 <code>--test-threads</code> 参数和希望使用的线程数量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> <span class="token builtin class-name">test</span> -- --test-threads<span class="token operator">=</span><span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将测试线程设置为 2 个，并且告诉程序不要使用并行运行。</p><h4 id="显示函数输出" tabindex="-1"><a class="header-anchor" href="#显示函数输出" aria-hidden="true">#</a> 显示函数输出</h4><p>默认情况下，测试通过时并不会显示标准输出流的内容，比如 <code>println!</code> 。测试通过了，也不会在终端中看到 <code>println!</code> 的输出内容。如果测试失败了，则会看到所有标准输出和其他错误信息。</p><p>如果你想要看到通过测试中打印的值，可以加上 <code>--show-output</code> 参数告诉 Rust 显示成功测试的输出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> <span class="token builtin class-name">test</span> -- --show-output\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="运行指定的测试" tabindex="-1"><a class="header-anchor" href="#运行指定的测试" aria-hidden="true">#</a> 运行指定的测试</h4><p>可以通过指定名字来运行部分测试，你可以向 <code>cargo test</code> 传递所希望运行的测试名称的参数来选择运行哪些测试。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">plus</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>\n    a <span class="token operator">+</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">testing_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">testing_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有传递参数，则三个测试函数都会并行运行。</p><p>向 <code>cargo test</code> 传递任意测试的名称来只运行这个测试，我们来只运行 <code>testing_one</code> 这个函数试试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> <span class="token builtin class-name">test</span> testing_one\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">1</span> test\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>testing_one <span class="token punctuation">...</span> ok\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">1</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有名称为 <code>testing_one</code> 的测试被运行了。</p><p>同样地，我们可以指定部分测试的名称，任何匹配（包含关系）这个名称的测试都会被运行。</p><p>运行以下命令，看看是不是包含 <code>testing</code> 的测试名称的测试都会被运行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> <span class="token builtin class-name">test</span> testing\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">2</span> tests\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>testing_one <span class="token punctuation">...</span> ok\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>testing_two <span class="token punctuation">...</span> ok\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">2</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>testing_one</code> 和 <code>testing_two</code> 都被运行了。</p><h4 id="忽略某些测试" tabindex="-1"><a class="header-anchor" href="#忽略某些测试" aria-hidden="true">#</a> 忽略某些测试</h4><p>有时候并不是所有的测试都希望运行，有些测试函数希望被忽略。可以使用 <code>ignore</code> 属性来标记耗时的测试并排除它们。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">plus</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>\n    a <span class="token operator">+</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">testing_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token attribute attr-name">#[test]</span>\n    <span class="token attribute attr-name">#[ignore]</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">testing_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设 <code>testing_two</code> 函数需要运行 2 小时，并使用 <code>ignore</code> 属性进行标记，再使用 <code>cargo test</code> 命令运行，输出为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">2</span> tests\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>testing_two <span class="token punctuation">...</span> ignored\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>testing_one <span class="token punctuation">...</span> ok\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">1</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n\n   <span class="token class-name">Doc</span><span class="token operator">-</span>tests test_lib\n\nrunning <span class="token number">0</span> tests\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">0</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>testing_two</code> 函数被标记为了 <code>ignored</code> ，并且没有运行。</p><p>但是我们只希望要运行被忽略的测试，可以给 <code>cargo</code> 添加 <code>--ignored</code> 参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> <span class="token builtin class-name">test</span> -- <span class="token parameter variable">--ignored</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>running <span class="token number">1</span> test\ntest <span class="token namespace">tests<span class="token punctuation">::</span></span>testing_two <span class="token punctuation">...</span> ok\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">1</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n\n   <span class="token class-name">Doc</span><span class="token operator">-</span>tests test_lib\n\nrunning <span class="token number">0</span> tests\n\ntest result<span class="token punctuation">:</span> ok<span class="token punctuation">.</span> <span class="token number">0</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到只运行了 <code>testing_two</code> 函数。</p><h3 id="测试的组织结构" tabindex="-1"><a class="header-anchor" href="#测试的组织结构" aria-hidden="true">#</a> 测试的组织结构</h3><p>Rust 社区倾向于根据测试的两个主要分类来组织测试：</p><ul><li>单元测试（unit tests）</li><li>集成测试（integration tests）</li></ul><p>单元测试倾向于更小且更集中，在隔离的环境中一次测试一个模块；而集成测试对于你的库来说完全是外部的，只测试公有接口且每个测试都有可能会测试多个模块。抽象地来说，就是按独立还是整体来组织测试。</p><h4 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h4><p>单元测试主要在与其他部分隔离的环境中测试每个单元的代码。</p><p>规范是在每个文件中创建包含测试函数的 <code>tests</code> 模块，并使用 <code>cfg(test)</code> 来标注模块。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// lib.rs</span>\n\n<span class="token attribute attr-name">#[cfg(test)]</span>\n<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>\n  <span class="token attribute attr-name">#[test]</span>\n  <span class="token keyword">fn</span> <span class="token function-definition function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#[cfg(test)]</code> 注解告诉 Rust 只在执行 <code>cargo test</code> 时才编译和运行测试代码，而在 <code>cargo build</code> 时不这么做。这可以减少编译产生的文件大小，并且可以节省编译时间。</p><h4 id="集成测试" tabindex="-1"><a class="header-anchor" href="#集成测试" aria-hidden="true">#</a> 集成测试</h4><p>在 Rust 中，集成测试对于库来说完全是外部的，其他模块只能调用一部分库中的公有 API。集成测试的目的是测试库的多个部分是否能一起正常工作。</p><p>编写集成测试，需要创建一个 <code>tests</code> 目录，并与 <code>src</code> 文件夹同级。此时，<code>Cargo</code> 就会知道如何去找这个目录中的集成测试文件了。在 <code>tests</code> 目录中创建任意多个测试文件，<code>Cargo</code> 会将每一个文件当作单独的 <code>crate</code> 来编译。</p><p>因为每一个 <code>tests</code> 目录中的测试文件都是完全独立的 <code>crate</code> ，所以需要在每一个文件中导入库，也就是在文件顶部添加 <code>use adder</code>。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> adder<span class="token punctuation">;</span>\n\n<span class="token attribute attr-name">#[test]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 ⚠️：如果一个单元测试失败了，则不会有任何集成测试和文档测试的输出，因为这些测试只会在所有单元测试都通过后才会执行。</p><p>如果想要在集成测试中实现子模块，也就是封装了一个通用函数，该函数被其他测试文件调用了，可以使用 <code>mod</code>文件路径来实现子模块：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── Cargo.lock\n├── Cargo.toml\n├── src\n│   └── lib.rs\n└── tests\n    ├── sub\n    │   └── mod.rs\n    └── testing.rs\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这告诉了 Rust 不要将 <code>sub</code> 看作一个集成测试文件，而是一个模块，这样在测试输出中就不会出现有关 <code>sub</code> 的输出了。</p><p>单元测试独立地验证库的不同部分，也能够测试私有函数实现细节。集成测试则检查多个部分是否能结合起来正确地工作，并像其他外部代码那样测试库的公有 API。</p>', 52);
function _sfc_render(_ctx, _cache) {
  const _component_font = resolveComponent("font");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("Rust 是一个相当重视正确性的编程语言，"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("即使 Rust 拥有类型系统，但类型系统不可能捕获所有的问题")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。于是，Rust 包含了对自动化测试的支持。倘若我们编写了一个函数，Rust 会进行所有的借用检查和类型检查，但是 Rust 并不能检查该函数是否能准确地完成我们预期的功能。这时就需要 Rust 支持的测试功能了。")
    ]),
    _hoisted_2,
    createBaseVNode("p", null, [
      createTextVNode("Rust 中的测试函数是"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("用来验证非测试代码是否按照期望的方式运行的")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_3,
    _hoisted_4,
    _hoisted_5,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("Rust 中的测试就是一个带有 `test` 属性注解的函数")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("。属性是关于 Rust 代码片段的元数据，为了将一个函数变成测试函数，需要在 "),
    _hoisted_6,
    createTextVNode(" 之前加上 "),
    _hoisted_7,
    createTextVNode("。"),
    _hoisted_8,
    createBaseVNode("p", null, [
      _hoisted_37,
      createTextVNode(" 宏和 "),
      _hoisted_38,
      createTextVNode(" 宏在底层分别使用了 "),
      _hoisted_39,
      createTextVNode(" 和 "),
      _hoisted_40,
      createTextVNode(" 。当断言失败时，这些宏就会调用调试格式来打印出其参数，这意味着被比较的值必须实现了 "),
      _hoisted_41,
      createTextVNode(" 和 "),
      _hoisted_42,
      createTextVNode(" 。对于自定义枚举和结构体，需要实现 "),
      _hoisted_43,
      createTextVNode(" 才能断言它们的值是否相等，需要实现 "),
      _hoisted_44,
      createTextVNode(" 才能在断言失败的时候打印它们的值。"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("通常可以在枚举或结构体上添加 "),
          _hoisted_45,
          createTextVNode(" 注解即可解决")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_46,
    createVNode(_component_font, { color: "red" }, {
      default: withCtx(() => [
        createTextVNode("当运行多个测试时，Rust 默认使用线程来并行运行")
      ]),
      _: 1
      /* STABLE */
    }),
    createTextVNode("。因为测试是同时运行的，应该确保测试不能相互依赖。"),
    _hoisted_65
  ]);
}
const rustTest_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "rust-test.html.vue"]]);
export {
  rustTest_html as default
};
