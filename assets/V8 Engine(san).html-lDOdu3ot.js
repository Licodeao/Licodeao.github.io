import { _ as _export_sfc, o as openBlock, c as createElementBlock, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="前瞻" tabindex="-1"><a class="header-anchor" href="#前瞻" aria-hidden="true">#</a> 前瞻</h2><blockquote><p>JavaScript中&quot;函数是一等公民&quot;背后的含义是什么？</p></blockquote><p>​ 在JavaScript中，可以将一个函数赋值给一个变量，还可以将函数作为一个参数传递给另外一个函数，亦是可以使得一个函数返回另外一个函数。由此可以看出JavaScript中的函数非常灵活，<strong>其根本原因在于JavaScript中的函数是一种特殊的对象</strong>，将<strong>JavaScript中的函数称为一等公民(First Class Function)</strong>。基于这样的设计，使得JavaScript非常容易实现一些特性，如闭包、函数式编程。</p><h2 id="javascript中的对象是什么" tabindex="-1"><a class="header-anchor" href="#javascript中的对象是什么" aria-hidden="true">#</a> JavaScript中的对象是什么</h2><p>​ 在前瞻中提到：在JavaScript中函数是一种特殊的对象，那到底特殊在哪里呢？什么是JavaScript中的对象呢？</p><p>​ 和其他语言不同的是，JavaScript是一门<strong>基于对象</strong>(<strong>Object-Based</strong>)的语言，函数、数组都是JavaScript中的对象。并且，在这些对象运行时可以动态修改其内容。</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20221011170939810.png" alt="image-20221011170939810"></p><p>​ <strong>虽然JavaScript是基于对象设计的</strong>，但<strong>它并不是传统的面向对象(OOP)的语言</strong>，因为OOP语言天然支持封装、继承、多态，但JavaScript并没有直接提供多态的支持。除了多态，在实现继承的方面同样与传统的OOP语言存在着较大的差异。<strong>JavaScript实现继承的方式</strong>：<strong>只是在对象中添加了一个称为原型的属性，把继承的对象通过原型链接起来</strong>，这就实现了继承，这种继承方式称为<strong>基于原型链继承</strong>。</p><p>​ 其实，JavaScript中的对象非常简单，<strong>每个对象就是由一组组属性和值构成的集合</strong>，如下方代码创建了一个person对象：</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>var person = new Object();\nperson.name = &quot;licodeao&quot;;\nperson.age = 20;\nperson.sex = &quot;male&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>name</td><td>&quot;licodeao&quot;</td></tr><tr><td>age</td><td>20</td></tr><tr><td>sex</td><td>&quot;male&quot;</td></tr></tbody></table><p>表格展示了person对象的结构，<strong>由多组属性和值组成，这就是JavaScript中的对象</strong>。当然，<strong>对象中属性的值可以是任意类型的数据</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;licodeao&quot;</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span>info<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span>info<span class="token punctuation">.</span>eyeColor <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span><span class="token function-variable function">showInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;showInfo&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方代码的内存图，如下图所示：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20221011174356775.png" alt="image-20221011174356775"></p><p>从图中，可以看出对象的属性值有三种类型：</p><ul><li>原始类型 <ul><li>所谓的原始类的数据，是<strong>指值本身无法被改变</strong>。比如，字符串就是原始类型，如果修改了字符串的值，那么<strong>V8引擎会返回给你一个新的字符串，而原始字符串并没有被改变</strong>。</li><li>JavaScript中的<strong>原始类型的值</strong>有<strong>null、undefined、boolean、number、string、bigint、symbol这七种</strong>。</li></ul></li><li>对象类型 <ul><li><strong>对象的属性值也可以是另外一个对象</strong></li></ul></li><li>函数类型 <ul><li><strong>如果对象中的某个属性的属性值是一个函数，那么这个属性称为方法</strong></li></ul></li></ul><h2 id="函数的本质" tabindex="-1"><a class="header-anchor" href="#函数的本质" aria-hidden="true">#</a> 函数的本质</h2><p>了解了对象，就能更好的理解函数了。</p><p>一直说的：在JavaScript中函数是一种特殊的对象，那到底特殊在哪里呢？特殊在<strong>函数能被调用</strong>。</p><p>函数是一种特殊的对象，<strong>它和对象一样可以拥有属性和值</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 函数的属性和值</span>\nfoo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 函数被调用</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v8引擎是如何实现函数能被调用的特点呢" tabindex="-1"><a class="header-anchor" href="#v8引擎是如何实现函数能被调用的特点呢" aria-hidden="true">#</a> V8引擎是如何实现函数能被调用的特点呢？</h3><blockquote><p>一段很长的代码中，假设有几十个函数被调用了，那么V8引擎是如何知道哪些函数被调用了？</p><p>以及如何正确地执行对应的函数体中的代码呢？</p><p>能够猜到的是，V8引擎应该是在每个函数的内部做了某些标记。</p></blockquote><p>​ 实际上，V8引擎确实对函数做了一些手脚。<strong>在V8引擎内部，会为函数对象添加两个隐藏属性(name和code)</strong>，如下图：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20221011195207385.png" alt="image-20221011195207385"></p><ul><li><p><strong>隐藏属性name的值就是函数名称</strong>，<strong>如果某个函数没有设置函数名</strong>，如下方代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么<strong>该函数对象的默认的name属性值就是anonymous</strong>，表示<strong>该函数对象没有被设置名字</strong>。</p></li><li><p><strong>隐藏属性code的值表示函数体中的代码</strong>，<strong>以字符串的形式存储在内存中</strong>。</p></li><li><p>当<strong>执行到一个函数调用语句时</strong>，V8引擎便会<strong>从函数对象中取出code属性值</strong>，即对应的函数体代码，然后<strong>再解释执行这段函数代码</strong>。</p></li></ul><h2 id="函数是一等公民" tabindex="-1"><a class="header-anchor" href="#函数是一等公民" aria-hidden="true">#</a> 函数是一等公民</h2><blockquote><p>语言中的函数可以和数据类型做一样的事情，则该语言中的函数称为一等公民</p></blockquote><p>执行JavaScript函数的过程中，<strong>为了实现变量的查找，V8引擎会为其维护一个作用域链，如果函数中使用了某个变量，但是在函数内部又没有定义该变量，那么函数就会沿着作用域链去外部的作用域中查找该变量</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    number<span class="token operator">++</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> bar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> myBar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">myBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上方的代码中，在foo函数中定义了一个新的bar函数，并且bar函数引用了foo函数中的变量number，当调用foo函数时，它会返回bar函数。那么，<strong>&quot;函数是一等公民&quot;就体现在：如果要返回函数bar给外部(即myBar)，那么即便foo函数执行结束了，其内部定义的number变量也不能销毁，因为bar函数依然引用了该变量</strong>。</p><blockquote><p>为什么不能销毁？</p></blockquote><ul><li>其一：<strong>bar函数依然引用了number变量</strong></li><li>其二：<strong>被引用的外部变量是需要确定存在的，因为虚拟机还需要处理函数引用的外部变量</strong>，贸然删除会导致虚拟机懵逼的。</li></ul><p><strong>这种将外部变量和函数绑定起来的技术称为闭包</strong>，关于闭包更详细的内容可以翻阅前面的文章《关于JavaScript闭包的理解》，看完前面的文章再看此篇，相信会对函数以及闭包会有更加偏底层的理解。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>JavaScript中的<strong>对象是由多组属性和值组成的集合</strong></li><li>与传统OOP语言实现继承不同的是，<strong>JavaScript是基于原型链继承</strong></li><li>JavaScript中&quot;<strong>函数是一等公民</strong>&quot;</li><li>V8引擎在处理函数的&quot;<strong>可被调用</strong>&quot;特性时，会<strong>在函数对象内部添加隐藏属性name和code，name是函数名称，code是函数体中的代码；name属性的默认值是anonymous，code所存储的值以字符串的形式存储在内存中</strong>。</li><li><strong>&quot;函数是一等公民&quot;体现在：返回内部函数给外部时，即便父函数执行结束，其内部定义的变量也不能销毁(因为被内部函数引用了或与内部函数产生了绑定)</strong></li></ul><p>度过了一个无聊且惬意的国庆，该使劲输出了~</p>', 38);
const _hoisted_39 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_39);
}
const V8_Engine_san__html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "V8 Engine(san).html.vue"]]);
export {
  V8_Engine_san__html as default
};
