import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="前瞻" tabindex="-1"><a class="header-anchor" href="#前瞻" aria-hidden="true">#</a> 前瞻</h2><p>在使用TypeScript进行类型检测时，遇到过几个不可思议的现象，这篇将赘述现象之一 —— 类型插图</p><h2 id="类型插图" tabindex="-1"><a class="header-anchor" href="#类型插图" aria-hidden="true">#</a> 类型插图</h2><blockquote><p>什么是类型插图？</p><p>看见这名字会觉得很抽象，去了解后再回看这个命名，依然觉得很抽象...</p><p>在对于对象的字面量赋值时，会出现类型插图</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 代码显然会报错</span>\n<span class="token comment">// Object literal may only specify know properties, and &#39;age&#39; does not exist</span>\n<span class="token keyword">const</span> p<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;licodeao&quot;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;eating&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 直接赋值给p不行，那我们间接赋值给p</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;licodeao&quot;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;eating&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> p<span class="token operator">:</span> Person <span class="token operator">=</span> obj\n\n<span class="token comment">// 在VSCode上跑，你会发现VSCode并不会报错，也表明了TypeScript是允许这样子干的</span>\n<span class="token comment">// 那么为什么会有这么奇葩的现象出现呢？</span>\n<span class="token comment">// 往下看↓</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>奇葩的现象被TypeScript默许了，这表明了TypeScript内部的检测机制是允许这种现象的发生的</p><p>引用TypeScript首席架构师Ahejlsberg在TypeScript PR里面的回答：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20230104122543241.png" alt="image-20230104122543241"></p>', 8);
const _hoisted_9 = {
  href: "https://github.com/microsoft/TypeScript/pull/3823",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_10 = /* @__PURE__ */ createStaticVNode('<p>上方的代码为什么不报错？原因在这里：</p><ul><li><strong>每个对象字面量最初都被认为是fresh（新鲜的）</strong></li><li><strong>当一个新鲜的对象字面量分配给一个变量或传递给一个非空目标类型的参数时，对象字面量指定（含有）目标类型中不存在的属性是错误的</strong><ul><li><strong>第一次创建的对象字面量，被认为是fresh（新鲜的）</strong></li><li><strong>对于新鲜的对象字面量，TypeScript会进行严格的类型检测，必须完全满足类型的要求（不能有多余的属性）</strong></li></ul></li><li><strong>当类型断言或对象字面量的类型扩大（复用）时，新鲜度会消失（从而不进行严格的类型检测）</strong></li></ul><p>在我们间接赋值时，对象字面量的类型扩大（可以理解为复用），从而导致了对象字面量的新鲜度消失了，因此TypeScript不会对新鲜度消失的对象字面量进行严格的类型检测</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 依然拿上方的代码作为例子</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// { name: &quot;licodeao&quot;, age: 18, eating: function() { console.log(&quot;eating&quot;) } }</span>\n<span class="token comment">// 这个对象字面量首次被创建，被认为是新鲜的，所以会进行严格的类型检测，因此会报错×</span>\n<span class="token keyword">const</span> p<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;licodeao&quot;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;eating&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// { name: &quot;licodeao&quot;, age: 18, eating: function() { console.log(&quot;eating&quot;) } }</span>\n<span class="token comment">// 这个对象字面量在有新鲜度时，被分配给obj变量了</span>\n<span class="token comment">// obj变量又分配给了p变量，那么此时上方的对象字面量进行了复用（即对象字面量的类型扩大），因此该对象字面量失去了新鲜度</span>\n<span class="token comment">// TypeScript不会对该对象字面量进行严格的类型检测，因此不会报错√</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;licodeao&quot;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;eating&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> p<span class="token operator">:</span> Person <span class="token operator">=</span> obj\n\n<span class="token comment">// 首次创建的对象字面量传递给一个非空目标类型的参数，会进行严格的类型检测</span>\n<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span>message<span class="token operator">:</span> Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 进行严格的类型检测，报错×</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;licodeao2&quot;</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">1.88</span><span class="token punctuation">,</span> <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 以同样的方式使首次创建的对象字面量失去新鲜度</span>\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;licodeao2&quot;</span><span class="token punctuation">,</span>\n  height<span class="token operator">:</span> <span class="token number">1.88</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 不会进行严格的类型检测，不报错√</span>\n<span class="token function">print</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><strong>类型插图，也可以称为严格字面量赋值检测（这个看着应该就不会那么抽象了）</strong></p><p>这种现象虽然看起来很奇怪，但依然符合TypeScript内部的检测机制，为什么会存在这种现象呢？</p><ul><li><strong>其实一方面增加了对象的复用性</strong></li><li><strong>另一方面避免了在之后复用对象时再添加类型的麻烦</strong></li></ul><p><strong>知识点</strong>：</p><ul><li><strong>每个对象字面量最初都被认为是fresh（新鲜的）</strong></li><li><strong>当一个新鲜的对象字面量分配给一个变量或传递给一个非空目标类型的参数时，对象字面量指定（含有）目标类型中不存在的属性是错误的</strong><ul><li><strong>第一次创建的对象字面量，被认为是fresh（新鲜的）</strong></li><li><strong>对于新鲜的对象字面量，TypeScript会进行严格的类型检测，必须完全满足类型的要求（不能有多余的属性）</strong></li></ul></li><li><strong>当类型断言或对象字面量的类型扩大（复用）时，新鲜度会消失（从而不进行严格的类型检测）</strong></li></ul><p>这些现象虽然奇怪，但依然符合TypeScript内部的检测机制，因此从某种角度来说，这种现象是合理的。不过，看来TypeScript的类型约束并没有那么严格，并不像Java等语言一样。因此，TypeScript奇怪现象多，但也代表了细节多，这也让TypeScript变得更有意思了，另外类型体操是痛并快乐的一点~</p>', 11);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_9, [
        createTextVNode("查看评论详情戳这里~"),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _hoisted_10
  ]);
}
const typelllustration_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "typelllustration.html.vue"]]);
export {
  typelllustration_html as default
};
