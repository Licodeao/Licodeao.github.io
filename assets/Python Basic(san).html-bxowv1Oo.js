import { _ as _export_sfc, o as openBlock, c as createElementBlock, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="_1-字典" tabindex="-1"><a class="header-anchor" href="#_1-字典" aria-hidden="true">#</a> 1.字典</h2><blockquote><p>类似于JavaScript中的<strong>对象</strong></p></blockquote><p>​ 字典是Python内置的数据结构之一，<strong>与列表一样是一个可变序列</strong>。以<strong>键值对</strong>的方式<strong>存储数据</strong>，<strong>字典是一个无序的序列</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>scores <span class="token operator">=</span> <span class="token punctuation">{</span>\n	<span class="token string">&#39;zs&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n	<span class="token string">&#39;ls&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span>\n	<span class="token string">&#39;ww&#39;</span><span class="token punctuation">:</span> <span class="token number">60</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典的创建" tabindex="-1"><a class="header-anchor" href="#字典的创建" aria-hidden="true">#</a> 字典的创建</h3><ul><li><p>使用花括号</p></li><li><p>使用内置函数<code>dict()</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>scores <span class="token operator">=</span> <span class="token punctuation">{</span>\n	<span class="token string">&#39;zs&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n	<span class="token string">&#39;ls&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">,</span>\n	<span class="token string">&#39;ww&#39;</span><span class="token punctuation">:</span> <span class="token number">60</span>\n<span class="token punctuation">}</span>\n\nscores <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="字典元素的获取" tabindex="-1"><a class="header-anchor" href="#字典元素的获取" aria-hidden="true">#</a> 字典元素的获取</h3><ul><li><p>中括号 [ ]</p></li><li><p>get()方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>scores<span class="token punctuation">[</span><span class="token string">&#39;zs&#39;</span><span class="token punctuation">]</span>\nscores<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;zs&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="与get-的区别" tabindex="-1"><a class="header-anchor" href="#与get-的区别" aria-hidden="true">#</a> []与get()的区别</h4><ul><li>使用[ ]时，如果字典中不存在指定的key，抛出<code>keyError</code>异常</li><li>get()方法取值，如果字典中不存在指定的key，并不会抛出<code>KeyError</code>异常而是<strong>返回None</strong>，可以<strong>通过参数设置默认的异常值</strong>，以便指定的key不存在时返回</li></ul><h3 id="key的判断" tabindex="-1"><a class="header-anchor" href="#key的判断" aria-hidden="true">#</a> key的判断</h3><p>依然采用 <strong>in / not in</strong> 判断指定的key在字典中是否存在</p><h3 id="字典元素的新增与删除" tabindex="-1"><a class="header-anchor" href="#字典元素的新增与删除" aria-hidden="true">#</a> 字典元素的新增与删除</h3><ul><li>新增：<code>scores[&#39;key&#39;] = value</code></li><li>删除：<code>del scores[&#39;key&#39;]</code></li><li>clear() -&gt; 清空字典的元素</li></ul><h3 id="获取字典视图" tabindex="-1"><a class="header-anchor" href="#获取字典视图" aria-hidden="true">#</a> 获取字典视图</h3><ul><li><strong>keys()</strong> -&gt; 获取字典中<strong>所有key</strong></li><li><strong>values()</strong> -&gt; 获取字典中<strong>所有value</strong></li><li><strong>items()</strong> -&gt; 获取字典中<strong>所有键值对</strong></li></ul><h3 id="字典元素的遍历" tabindex="-1"><a class="header-anchor" href="#字典元素的遍历" aria-hidden="true">#</a> 字典元素的遍历</h3><p><strong>自定义变量</strong>对应的是<strong>字典元素中的key</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> scores<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典元素的特点" tabindex="-1"><a class="header-anchor" href="#字典元素的特点" aria-hidden="true">#</a> 字典元素的特点</h3><ul><li>字典中的所有元素都是一个键值对，key不允许重复，value可以重复</li><li>字典中的元素是无序的</li><li>字典中的key必须是不可变对象</li><li>字典会浪费较大的内存，是一种使用空间换取时间的数据结构</li></ul><h3 id="字典生成式" tabindex="-1"><a class="header-anchor" href="#字典生成式" aria-hidden="true">#</a> 字典生成式</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Fruit&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Books&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Others&#39;</span><span class="token punctuation">]</span>\nprices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>\n		⬇\n<span class="token punctuation">{</span>\n    <span class="token string">&#39;Fruit&#39;</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;Books&#39;</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;Others&#39;</span><span class="token punctuation">:</span><span class="token number">30</span>\n<span class="token punctuation">}</span>\n\n此过程类似打包，需要将两个可迭代对象组合成一个元组\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内置函数zip" tabindex="-1"><a class="header-anchor" href="#内置函数zip" aria-hidden="true">#</a> 内置函数zip()</h4><p>​ 用于将<strong>可迭代的对象</strong>作为参数，将对象中对应的元素<strong>打包成一个元组</strong>，然后<strong>返回由这些元组组成的列表</strong></p><blockquote><p>字典生成式</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Fruit&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Books&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Others&#39;</span><span class="token punctuation">]</span>\nprices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>\nlists <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span>prices<span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>lists<span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;Fruit&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;Books&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;Others&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n\n<span class="token comment"># 字典生成式</span>\n<span class="token punctuation">{</span> item<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> prices <span class="token keyword">for</span> item<span class="token punctuation">,</span>prices <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span>prices<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;FRUIT&#39;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;BOOKS&#39;</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;OTHERS&#39;</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span>\n	↓\n 这里key大写了\n\n<span class="token triple-quoted-string string">&#39;&#39;&#39;\n   字典生成式本质与列表生成式是一样的\n   无非就是字典生成式的&quot;表示字典元素&quot;变成了键值对的形式\n   以及遍历对象变成了使用内置函数zip打包形成的新列表\n&#39;&#39;&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-元组" tabindex="-1"><a class="header-anchor" href="#_2-元组" aria-hidden="true">#</a> 2.元组</h2><p>Python内置的数据结构之一，是一个<strong>不可变序列</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 元组</span>\ntest <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不可变序列与可变序列" tabindex="-1"><a class="header-anchor" href="#不可变序列与可变序列" aria-hidden="true">#</a> 不可变序列与可变序列</h3><ul><li><strong>不可变序列</strong>(<strong>没有增、删、改的操作</strong>)：<strong>字符串、元组</strong></li><li><strong>可变序列</strong>(<strong>有增、删、改的操作，对象地址不发生更改</strong>)：<strong>列表、字典</strong></li></ul><h3 id="元组的创建方式" tabindex="-1"><a class="header-anchor" href="#元组的创建方式" aria-hidden="true">#</a> 元组的创建方式</h3><ol><li>直接使用小括号</li><li>使用内置函数tuple()</li><li>只包含一个元素的元组需要使用逗号和小括号</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用小括号</span>\ntest <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span>\n\n<span class="token comment"># 使用内置函数tuple()</span>\ntest <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 只包含一个元组的元素需要使用逗号和小括号</span>\ntest <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">,</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组的遍历" tabindex="-1"><a class="header-anchor" href="#元组的遍历" aria-hidden="true">#</a> 元组的遍历</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>test <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> item <span class="token keyword">in</span> test<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-集合" tabindex="-1"><a class="header-anchor" href="#_3-集合" aria-hidden="true">#</a> 3.集合</h2><blockquote><p>集合是没有value的字典，可看作只有key的字典</p></blockquote><h3 id="集合的创建方式" tabindex="-1"><a class="header-anchor" href="#集合的创建方式" aria-hidden="true">#</a> 集合的创建方式</h3><ol><li><p>直接使用花括号 { }</p></li><li><p>使用内置函数set()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用花括号</span>\ns <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">}</span>\n\n<span class="token comment"># 使用内置函数set()</span>\ns <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="集合的判断" tabindex="-1"><a class="header-anchor" href="#集合的判断" aria-hidden="true">#</a> 集合的判断</h3><p>依然使用 <strong>in / not in</strong> 判断是否是集合</p><h3 id="集合的新增" tabindex="-1"><a class="header-anchor" href="#集合的新增" aria-hidden="true">#</a> 集合的新增</h3><table><thead><tr><th>add()</th><th>一次添加一个元素</th></tr></thead><tbody><tr><td><strong>update()</strong></td><td>一次添加<strong>多个</strong>元素</td></tr></tbody></table><h3 id="集合的删除" tabindex="-1"><a class="header-anchor" href="#集合的删除" aria-hidden="true">#</a> 集合的删除</h3><table><thead><tr><th>remove()</th><th>一次删除一个指定元素，如果指定的元素不存在抛出<code>KeyError</code>异常</th></tr></thead><tbody><tr><td><strong>discard()</strong></td><td>一次<strong>删除一个指定元素</strong>，如果指定的元素不存在则<strong>不抛异常</strong></td></tr><tr><td><strong>pop()</strong></td><td>一次<strong>删除一个任意元素</strong></td></tr><tr><td><strong>clear()</strong></td><td>清空集合</td></tr></tbody></table><h3 id="集合间的关系" tabindex="-1"><a class="header-anchor" href="#集合间的关系" aria-hidden="true">#</a> 集合间的关系</h3><ul><li>两个集合是否相等：== 或 !=</li><li>一个集合是否是另一个集合的子集：调用方法<code>issubset()</code></li><li>一个集合是否是另一个集合的超集：调用方法<code>issuperset()</code></li><li>两个集合是否没有交集：调用方法<code>isdisjoint()</code></li></ul><h3 id="集合生成式" tabindex="-1"><a class="header-anchor" href="#集合生成式" aria-hidden="true">#</a> 集合生成式</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 集合生成式</span>\n<span class="token punctuation">{</span> i<span class="token operator">*</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n\n<span class="token comment"># 将 {} -&gt; [] 就是列表生成式</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 51);
const _hoisted_52 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_52);
}
const Python_Basic_san__html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Python Basic(san).html.vue"]]);
export {
  Python_Basic_san__html as default
};
