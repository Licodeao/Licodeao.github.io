import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>本来想着用 <code>Node</code> 写点东西玩儿，写着写着发现没有 <code>TypeScript</code> 的类型提示真的好难受，于是马不停蹄地安装 <code>TypeScript</code> 一系列工具包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> typescript ts-node @types/node --save-dev\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再通过手动创建 <code>tsconfig.json</code> 文件，并手动指定相关选项：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// tsconfig.json</span>\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NodeNext&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NodeNext&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>nodemon</code> 的热重载，避免手动重启：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// nodemon.json</span>\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;ext&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.ts .js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;exec&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ts-node ./src/index.ts&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置 <code>scripts</code> 命令：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n	<span class="token comment">// 省略其他部分</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.ts&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start:dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=dev nodemon&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，在启动之后报错：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension &quot;.ts&quot; \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>本着 Bug 不可怕原则，就开始着手解决了，然而没想到这个错误竟然耗费了我整个下午...</p><p>即使是去搜索网上的解决方案，也依然没有解决“我”的问题。所以将解决该错误的方式总结成一篇文章，方便下次回顾👀</p><h2 id="ts-node" tabindex="-1"><a class="header-anchor" href="#ts-node" aria-hidden="true">#</a> ts-node</h2><p>可以看到究其原因是 <code>nodemon</code> 在执行命令时出错了，根本原因还是在 <code>ts-node</code> 没有执行成功。那么，什么是 <code>ts-node</code> 呢？</p><p>简而言之，<code>ts-node</code> 是 <code>Node</code> 环境下的 <code>TypeScript</code> 引擎和 <code>REPL</code>，它将 <code>TypeScript</code> 编译为 <code>JavaScript</code> ，并且可以在 <code>Node</code> 环境中执行 <code>TypeScript</code> ，无需任何预编译操作。由于在内部挂载了 <code>Node</code> 模块加载的 <code>API</code> ，所以可以和其他 <code>NodeJS</code> 工具无缝地使用。</p>', 16);
const _hoisted_17 = {
  href: "https://typestrong.org/ts-node/docs/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_18 = /* @__PURE__ */ createStaticVNode('<h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><h3 id="esm" tabindex="-1"><a class="header-anchor" href="#esm" aria-hidden="true">#</a> esm</h3><p>可以在使用 <code>ts-node</code> 时尝试添加 <code>--esm</code> 标签或者在 <code>tsconfig.json</code> 文件中开启 <code>esm</code> 。</p><blockquote><p>--esm 标签</p></blockquote><p>在原来的 <code>nodemon.json</code> 文件中添加上 <code>esm</code> 标签：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208144802968.png" alt="image-20240208144802968"></p><p>运行启动命令后：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208144912660.png" alt="image-20240208144912660"></p><p>可以看到能够正常运行了。</p><blockquote><p>在配置文件中开启 esm</p></blockquote><p>我们将原来 <code>nodemon.json</code> 文件中的 <code>--esm</code> 标签删掉：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208145046623.png" alt="image-20240208145046623"></p><p>转向 <code>tsconfig.json</code> 配置文件，并在该文件中开启 <code>esm</code>：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208145147087.png" alt="image-20240208145147087"></p><p>运行启动命令后：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208145347378.png" alt="image-20240208145347378"></p><p>可以看到依然能够正常运行，其实以上两种方式是等价的，都是同一种解决办法，只不过是两种形式而已。</p><p><code>esm</code> 表示启用 <code>ES Module loader</code>，通过这个 <code>loader</code> 就可以将 <code>import</code> 等 <code>ES6</code> 语法与 <code>ts-node</code> 结合使用了。</p><p>开启 <code>ES Module loader</code> ，还有两种办法，其实就是通过指定 <code>loader</code> ：</p>', 19);
const _hoisted_37 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "ts-node-esm",
  -1
  /* HOISTED */
);
const _hoisted_38 = {
  href: "https://www.npmjs.com/package/ts-node-esm",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_39 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "--loader",
  -1
  /* HOISTED */
);
const _hoisted_40 = {
  href: "https://nodejs.org/docs/latest-v16.x/api/esm.html#loaders",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_41 = /* @__PURE__ */ createStaticVNode('<blockquote><p>使用 ts-node-esm</p></blockquote><p>我们通过以下命令来运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx ts-node-esm src/index.ts\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将原来在配置文件中开启 <code>esm</code> 进行删除，并保持 <code>nodemon.json</code> 和 <code>tsconfig.json</code> 和之前一样：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208151050969.png" alt="image-20240208151050969"></p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208151111791.png" alt="image-20240208151111791"></p><p>运行上方的命令：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208151147499.png" alt="image-20240208151147499"></p><p>可以看到能够正常运行，使用 <code>npx</code> 命令时，如果本地没有安装指定的包，则 <code>npx</code> 会自动帮你安装并执行该包的命令。具体的查找规则：</p><ul><li>当前目录下的 <code>node_modules/.bin</code> 目录</li><li>全局下的 <code>node_modules/.bin</code> 目录</li><li>以上两个地方都没找到，<code>npx</code> 就会下载该包，并将其安装在临时目录下，然后执行相应的命令。</li></ul><blockquote><p>这个临时目录在哪儿？</p></blockquote><p>它通常是系统的临时目录，不同的系统有不同的临时目录：</p><ul><li>在 <code>Linux</code> 上，临时目录是 <code>/tmp</code></li><li>在 <code>Mac</code> 上，临时目录是 <code>/var/folders</code></li><li>在 <code>Windows</code> 上，临时目录是 <code>%TEMP%</code> 或 <code>%TMP%</code></li></ul><p>由于我使用的是 <code>Mac</code> ，所以去看看临时目录里有啥，当然我们并不知道临时目录在哪儿，需要一条指令来查看临时目录的位置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token variable">$TMPDIR</span> <span class="token comment"># 适用于 Mac/Linux</span>\n$ <span class="token builtin class-name">echo</span> %TEMP% <span class="token comment"># 适用于 Windows</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上命令：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208153102582.png" alt="image-20240208153102582"></p><p>可以看到临时目录已经出来了，我们进入该目录看看有啥：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208153201785.png" alt="image-20240208153201785"></p><p>可以看到有非常多文件，继续往下滑就能看到熟悉的身影：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208153255131.png" alt="image-20240208153255131"></p><p>可以看到其中有非常多 <code>yarn</code> 开头的文件，这些文件就是通过 <code>npx</code> 命令下载的包的临时目录了，进入其中一个临时目录看看：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208153511183.png" alt="image-20240208153511183"></p><p>可以看到有 <code>node</code> 和 <code>yarn</code> 两个关键词，它们表示通过 <code>npx yarn</code> 命令下载的 <code>yarn</code> 包，也就是说 <code>ts-node-esm</code> 这个包是通过 <code>yarn</code> 这个包管理工具下载的。</p><p>除了使用 <code>ts-node-esm</code> 这个包，还可以使用 <code>--loader</code> 标签。</p><blockquote><p>--loader 标签</p></blockquote><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208154100101.png" alt="image-20240208154100101"></p><p>可以看到 <code>--loader</code> 标签是通过 <code>node</code> 运行的，并且指定该 <code>loader</code> 为 <code>ts-node/esm</code> 即可。</p><p>该方式下，还可以使用 <code>Node</code> 环境变量注入指定的 <code>loader</code> ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token assign-left variable">NODE_OPTIONS</span><span class="token operator">=</span><span class="token string">&quot;--loader ts-node/esm&quot;</span> <span class="token function">node</span> src/index.ts\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看看输出：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208161323913.png" alt="image-20240208161323913"></p><p>可以看到能够成功运行，当然该指令目前只能在 <code>Mac/Linux</code> 系统下或 <code>Git bash</code> 环境运行，如果你想在 <code>Windows</code> 平台上及 <code>CMD</code> 或 <code>PowerShell</code> 环境运行时，可以安装 <code>cross-env</code> 包来运行。</p><p>其实使用 <code>ts-node-esm</code> 和 <code>--loader</code> 也是等价的，只是 <code>ts-node-esm</code> 相当于是显式地使用 <code>--loader</code> 标签。</p><p>综上所述，对于开启 <code>esm</code> ，其实有四种解决办法：</p><ul><li><code>--esm</code> 标签</li><li>在 <code>tsconfig.json</code> 文件中开启 <code>esm: true</code></li><li>使用 <code>ts-node-esm</code> 工具包</li><li>指定 <code>node loader </code> 为 <code>ts-node/esm</code></li></ul><h3 id="删除-type-module" tabindex="-1"><a class="header-anchor" href="#删除-type-module" aria-hidden="true">#</a> 删除 <code>type: module</code></h3><p>当 <code>type</code> 属性设置为 <code>module</code> 时，项目中的所有 <code>.js</code> 文件都被视为 <code>ES Modules</code> 。当使用 <code>ts-node</code> 时这会导致问题，因为 <code>ES Modules</code> 没有完全集成。如果删除掉 <code>type</code> 字段或将其设置为 <code>commonjs</code> ，则所有的 <code>.js</code> 文件都将被视为 <code>commonjs</code>。</p><p>将 <code>package.json</code> 文件中的 <code>type</code> 字段删除：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208155955009.png" alt="image-20240208155955009"></p><p>运行启动命令：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208160029057.png" alt="image-20240208160029057"></p><p>可以看到能够运行成功。当然这种解决方式不太合理，尽量不要使用这种方式。</p><h3 id="tsc-和-node替代" tabindex="-1"><a class="header-anchor" href="#tsc-和-node替代" aria-hidden="true">#</a> tsc 和 node替代</h3><p><code>ts-node</code> 实际上就是结合了 <code>tsc</code> 和 <code>node</code> ，如果 <code>ts-node</code> 使用上述方案仍然不能够运行，可以使用 <code>tsc</code> + <code>node</code> 进行替代：</p><p>通过以下命令进行替代：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx tsc <span class="token parameter variable">--outDir</span> dist <span class="token operator">&amp;&amp;</span> <span class="token function">node</span> dist/index.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看看输出：</p><p><img src="https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20240208160554291.png" alt="image-20240208160554291"></p><p>可以看到能够运行成功。</p><p>如果以上方案都不能解决问题，可以再仔细检查检查配置，或者干脆就不用 <code>TypeScript</code> 🤣，希望这篇文章能够帮助你。</p>', 51);
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("更多内容可以看看"),
      createBaseVNode("a", _hoisted_17, [
        createTextVNode("官方文档"),
        createVNode(_component_ExternalLinkIcon)
      ]),
      createTextVNode("。")
    ]),
    _hoisted_18,
    createBaseVNode("ul", null, [
      createBaseVNode("li", null, [
        createTextVNode("使用 "),
        _hoisted_37,
        createTextVNode(" 这个库，"),
        createBaseVNode("a", _hoisted_38, [
          createTextVNode("点击查看"),
          createVNode(_component_ExternalLinkIcon)
        ])
      ]),
      createBaseVNode("li", null, [
        createTextVNode("使用 "),
        _hoisted_39,
        createTextVNode(" 标签，"),
        createBaseVNode("a", _hoisted_40, [
          createTextVNode("点击查看"),
          createVNode(_component_ExternalLinkIcon)
        ])
      ])
    ]),
    _hoisted_41
  ]);
}
const tsNodeError_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "ts-node-error.html.vue"]]);
export {
  tsNodeError_html as default
};
