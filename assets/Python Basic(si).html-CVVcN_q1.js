import { _ as _export_sfc, o as openBlock, c as createElementBlock, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="一、字符串" tabindex="-1"><a class="header-anchor" href="#一、字符串" aria-hidden="true">#</a> 一、字符串</h2><h3 id="字符串驻留机制" tabindex="-1"><a class="header-anchor" href="#字符串驻留机制" aria-hidden="true">#</a> 字符串驻留机制</h3><blockquote><p>对相同的字符串<strong>只保留一份拷贝</strong>，后续创建相同字符串时，不会开辟新空间，而是<strong>把该字符串的地址赋值给新创建的变量</strong></p></blockquote><h3 id="字符串的查询操作" tabindex="-1"><a class="header-anchor" href="#字符串的查询操作" aria-hidden="true">#</a> 字符串的查询操作</h3><table><thead><tr><th><strong>index()</strong></th><th>查找子串<code>substr</code>第一次出现的位置，如果查找的子串不存在，则抛出<code>ValueError</code></th></tr></thead><tbody><tr><td><strong><code>rindex()</code></strong></td><td>查找子串<code>substr</code><strong>最后一次</strong>出现的位置，如果查找的子串不存在，则抛出<code>ValueError</code></td></tr><tr><td><strong>find()</strong></td><td>查找子串<code>substr</code>第一次出现的位置，如果查找的子串不存在，则返回-1</td></tr><tr><td><strong><code>rfind()</code></strong></td><td>查找子串<code>substr</code><strong>最后一次</strong>出现的位置，如果查找的子串不存在，则返回-1</td></tr></tbody></table><h3 id="格式化字符串" tabindex="-1"><a class="header-anchor" href="#格式化字符串" aria-hidden="true">#</a> 格式化字符串</h3><ul><li><strong>%</strong> 作占位符</li></ul><table><thead><tr><th>%s</th><th>字符串</th></tr></thead><tbody><tr><td>%i 或 %d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr></tbody></table><ul><li><strong>{ }</strong> 作占位符</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&#39;zs&#39;</span>\nage <span class="token operator">=</span> <span class="token number">20</span>\n\n<span class="token comment"># % 作占位符</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;姓名:%s, 年龄: %d&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># { } 作占位符</span>\n<span class="token comment"># {0} 表示取format方法的第一个参数</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;姓名:{0}, 年龄: {1}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、函数" tabindex="-1"><a class="header-anchor" href="#二、函数" aria-hidden="true">#</a> 二、函数</h2><h3 id="函数的创建" tabindex="-1"><a class="header-anchor" href="#函数的创建" aria-hidden="true">#</a> 函数的创建</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">[</span>输入参数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    函数体\n    <span class="token punctuation">[</span><span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\n\n<span class="token comment"># example</span>\n<span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    c <span class="token operator">=</span> a <span class="token operator">+</span> b\n    <span class="token keyword">return</span> c\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数的返回值" tabindex="-1"><a class="header-anchor" href="#函数的返回值" aria-hidden="true">#</a> 函数的返回值</h3><ul><li><p>函数返回多个值时，结果为元组</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>\n	odd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n	eveb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n	<span class="token keyword">for</span> i <span class="token keyword">in</span> num<span class="token punctuation">:</span>\n		<span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">:</span>\n			odd<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n		<span class="token keyword">else</span><span class="token punctuation">:</span>\n			even<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> odd<span class="token punctuation">,</span>even\n<span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="函数的参数" tabindex="-1"><a class="header-anchor" href="#函数的参数" aria-hidden="true">#</a> 函数的参数</h3><ul><li><p>个数可变的位置参数</p><p>使用 * 定义个数可变的位置形参，<strong>结果为一个元组</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\nfunc<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>个数可变的关键字形参</p><p>使用 ** 定义个数可变的关键字形参，<strong>结果为一个字典</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">**</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\nfunc<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数定义时，给形参设置默认值，只有与默认值不符时才需要传递实参</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>\n    \nfun<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment"># 此时a的值为100，b使用默认值10</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="三、异常处理及类型" tabindex="-1"><a class="header-anchor" href="#三、异常处理及类型" aria-hidden="true">#</a> 三、异常处理及类型</h2><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>\n    可能会出现异常的代码\n<span class="token keyword">except</span> 异常类型<span class="token punctuation">:</span>\n    报错后执行的代码\n\n<span class="token comment"># example</span>\n<span class="token keyword">try</span><span class="token punctuation">:</span>\n    n1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入一个整数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    n2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入另一个整数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    result <span class="token operator">=</span> n1 <span class="token operator">/</span> n2\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;result:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n<span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;除数不能为0&#39;</span><span class="token punctuation">)</span>\n    \n<span class="token comment"># 多个except结构，为了避免遗漏可能出现的异常，可以在最后增加BaseException</span>\n<span class="token keyword">try</span><span class="token punctuation">:</span>\n    n1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入一个整数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    n2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入另一个整数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    result <span class="token operator">=</span> n1 <span class="token operator">/</span> n2\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;result:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n<span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;除数不能为0&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n    \n<span class="token comment"># try...except...else结构</span>\n	<span class="token comment"># 如果try块中没有抛出异常，则执行else块；如果try中抛出异常，则执行except块</span>\n    \n<span class="token comment"># try...except...else...finally结构</span>\n	<span class="token comment"># finally块无论是否发生异常都会被执行</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="traceback模块" tabindex="-1"><a class="header-anchor" href="#traceback模块" aria-hidden="true">#</a> traceback模块</h3><ul><li><p>使用traceback模块打印异常信息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> traceback\n<span class="token keyword">try</span><span class="token punctuation">:</span>\n    num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span>\n<span class="token keyword">except</span><span class="token punctuation">:</span>\n    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="四、类与对象" tabindex="-1"><a class="header-anchor" href="#四、类与对象" aria-hidden="true">#</a> 四、类与对象</h2><h3 id="类的创建" tabindex="-1"><a class="header-anchor" href="#类的创建" aria-hidden="true">#</a> 类的创建</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建类</span>\n<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>\n    <span class="token keyword">pass</span>\n\n<span class="token decorator annotation punctuation">@classmethod</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token comment"># 定义类方法</span>\n<span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;类方法&#39;</span><span class="token punctuation">)</span>\n    \n<span class="token decorator annotation punctuation">@staticmethod</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token comment"># 定义静态方法</span>\n<span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;静态方法&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象的创建" tabindex="-1"><a class="header-anchor" href="#对象的创建" aria-hidden="true">#</a> 对象的创建</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 语法</span>\n实例对象名 <span class="token operator">=</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment"># 创建对象</span>\nstu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># Python同样支持动态绑定属性和方法</span>\nstu<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&#39;man&#39;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 动态绑定属性\n<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span>\nstu<span class="token punctuation">.</span>show <span class="token operator">=</span> show <span class="token operator">-</span><span class="token operator">&gt;</span> 动态绑定方法\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象的继承" tabindex="-1"><a class="header-anchor" href="#对象的继承" aria-hidden="true">#</a> 对象的继承</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 语法</span>\n<span class="token keyword">class</span> 子类名<span class="token punctuation">(</span>父类名<span class="token number">1</span><span class="token punctuation">,</span> 父类名<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;父类&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">info2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;子类&#39;</span><span class="token punctuation">)</span>\n    \nstu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>\nstu<span class="token punctuation">.</span>info2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 子类\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特殊方法和特殊属性" tabindex="-1"><a class="header-anchor" href="#特殊方法和特殊属性" aria-hidden="true">#</a> 特殊方法和特殊属性</h3><table><thead><tr><th>特殊属性</th><th><code>__dict__</code></th><th>获得类对象或实例对象所绑定的所有属性和方法的字典</th></tr></thead><tbody><tr><td>特殊方法</td><td><code>__len__()</code></td><td>通过重写<code>__len__()</code>方法，让内置函数<code>len()</code>的参数可以是自定义类型</td></tr><tr><td>特殊方法</td><td><code>__add__()</code></td><td>通过重写<code>__add__()</code>方法，可使自定义对象具有&quot;+&quot;功能</td></tr><tr><td>特殊方法</td><td><code>__new__()</code></td><td>用于创建对象</td></tr><tr><td>特殊方法</td><td><code>__init__()</code></td><td>对创建的对象进行初始化</td></tr></tbody></table><h2 id="五、模块" tabindex="-1"><a class="header-anchor" href="#五、模块" aria-hidden="true">#</a> 五、模块</h2><h3 id="导入模块" tabindex="-1"><a class="header-anchor" href="#导入模块" aria-hidden="true">#</a> 导入模块</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> 模块名称 <span class="token punctuation">[</span><span class="token keyword">as</span> 别名<span class="token punctuation">]</span>\n<span class="token keyword">from</span> 模块名称 <span class="token keyword">import</span> 函数<span class="token operator">/</span>变量<span class="token operator">/</span>类\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用内置模块" tabindex="-1"><a class="header-anchor" href="#常用内置模块" aria-hidden="true">#</a> 常用内置模块</h3><table><thead><tr><th>time</th><th>时间库</th></tr></thead><tbody><tr><td><code>os</code></td><td>访问操作系统服务功能的库</td></tr><tr><td><code>urllib</code></td><td>读取来自网上(服务器)的数据标准库</td></tr><tr><td><code>json</code></td><td><code>JSON</code>序列化和反序列化对象</td></tr><tr><td>re</td><td>在字符串中执行正则表达式匹配和替换</td></tr><tr><td>decimal</td><td>进行控制运算精度</td></tr><tr><td>logging</td><td>提供日志信息功能</td></tr></tbody></table><h3 id="第三方模块的安装" tabindex="-1"><a class="header-anchor" href="#第三方模块的安装" aria-hidden="true">#</a> 第三方模块的安装</h3><p><code>pip install 模块名</code></p>', 38);
const _hoisted_39 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_39);
}
const Python_Basic_si__html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Python Basic(si).html.vue"]]);
export {
  Python_Basic_si__html as default
};
