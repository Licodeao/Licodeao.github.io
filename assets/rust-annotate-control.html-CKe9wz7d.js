import { _ as _export_sfc, r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createTextVNode, d as createVNode, e as withCtx, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><p>留下注释，编译器在编译时会忽略注释。</p><h3 id="代码注释" tabindex="-1"><a class="header-anchor" href="#代码注释" aria-hidden="true">#</a> 代码注释</h3><p>简单的注释：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// hello world</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 Rust 中，惯用的注释都是以 <code>//</code> 双斜线开始的，并持续到本行结尾。</p><p>对于超过一行的注释，需要在每行的开头都加上 <code>//</code></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// hello world</span>\n<span class="token comment">// hello rust</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文档注释" tabindex="-1"><a class="header-anchor" href="#文档注释" aria-hidden="true">#</a> 文档注释</h3><p>在 Rust 中，文档注释以 <code>///</code> 开始，并且文档注释在编译后会生成 HTML 文档。</p><p>不过文档注释常用在 <code>crate</code> 包中，生成的 HTML 文档会展示公有 API 文档注释的内容，使得对这个库感兴趣的开发者能够理解如何使用这个 <code>crate</code> 包。</p><p>文档注释一般位于项目的代码之前：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">/// Make a plus</span>\n<span class="token comment">/// # Example</span>\n<span class="token comment">/// ```</span>\n<span class="token comment">/// let arg = 5;</span>\n<span class="token comment">/// let answer = my_crate::plus(arg);</span>\n<span class="token comment">/// assert_eq!(6, answer);</span>\n<span class="token comment">/// ```</span>\n<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">plus</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>\n  num <span class="token operator">+</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>cargo doc</code> 来生成当前文档注释的HTML文档。</p><p>通过 <code>cargo doc --open</code> 会构建当前 <code>crate</code> 文档的HTML，并在浏览器打开。</p><h2 id="控制流" tabindex="-1"><a class="header-anchor" href="#控制流" aria-hidden="true">#</a> 控制流</h2><p>Rust 中常见的控制流结构是 <code>if 表达式</code> 和 <code>循环</code>。</p><h3 id="if-表达式" tabindex="-1"><a class="header-anchor" href="#if-表达式" aria-hidden="true">#</a> if 表达式</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;True&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;False&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️：条件必须是 <code>bool</code> 类型，否则编译会出错。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>   <span class="token operator">|</span>\n<span class="token number">66</span> <span class="token operator">|</span>   <span class="token keyword">if</span> number <span class="token punctuation">{</span>\n   <span class="token operator">|</span>      <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> expected `<span class="token keyword">bool</span>`<span class="token punctuation">,</span> found integer\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 21);
const _hoisted_22 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "bool",
  -1
  /* HOISTED */
);
const _hoisted_23 = /* @__PURE__ */ createStaticVNode('<h4 id="在-let-语句中使用-if" tabindex="-1"><a class="header-anchor" href="#在-let-语句中使用-if" aria-hidden="true">#</a> 在 let 语句中使用 if</h4><p>因为 <code>if</code> 是一个表达式，所以可以在 <code>let</code> 语句的右侧使用它。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token keyword">if</span> flag <span class="token punctuation">{</span> <span class="token number">6</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  \n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of v is: {v}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 3);
const _hoisted_26 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "if",
  -1
  /* HOISTED */
);
const _hoisted_27 = /* @__PURE__ */ createStaticVNode('<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token keyword">if</span> flag <span class="token punctuation">{</span> <span class="token number">6</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token string">&quot;false&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  \n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of v is: {v}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>   <span class="token operator">|</span>\n<span class="token number">66</span> <span class="token operator">|</span>   <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token keyword">if</span> flag <span class="token punctuation">{</span> <span class="token number">6</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token string">&quot;false&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n   <span class="token operator">|</span>                     <span class="token operator">-</span>          <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> expected integer<span class="token punctuation">,</span> found `<span class="token operator">&amp;</span><span class="token keyword">str</span>`\n   <span class="token operator">|</span>                     <span class="token operator">|</span>\n   <span class="token operator">|</span>                     expected because of this\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为变量只能拥有一个类型，所以必须保证 <code>if</code> 的每个分支的返回值都是相同类型。</p><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h3><p>在 Rust 中，有三种循环：<code>loop</code> , <code>while</code> , <code>for</code></p><h4 id="loop" tabindex="-1"><a class="header-anchor" href="#loop" aria-hidden="true">#</a> loop</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;loop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从循环中返回值" tabindex="-1"><a class="header-anchor" href="#从循环中返回值" aria-hidden="true">#</a> 从循环中返回值</h4><p>如果将返回值加入到用来停止循环的 <code>break</code> 表达式，它会被停止的循环返回：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n      counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">{</span>\n        <span class="token keyword">break</span> counter <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The result is {result}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="循环标签" tabindex="-1"><a class="header-anchor" href="#循环标签" aria-hidden="true">#</a> 循环标签</h4><p>循环标签的作用是在多个循环之间消除歧义</p><p>如果存在嵌套循环，那么 <code>break</code> 和 <code>continue</code> 会应用于此时最内层的循环；</p>', 13);
const _hoisted_40 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "break",
  -1
  /* HOISTED */
);
const _hoisted_41 = /* @__PURE__ */ createBaseVNode(
  "code",
  null,
  "continue",
  -1
  /* HOISTED */
);
const _hoisted_42 = /* @__PURE__ */ createStaticVNode('<p>使用 <code>&#39;</code> 定义一个循环标签</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token lifetime-annotation symbol">&#39;Outer_loop</span><span class="token punctuation">:</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Outer loop counter: {counter}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">let</span> <span class="token keyword">mut</span> remaining <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">loop</span> <span class="token punctuation">{</span>\n          <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Inner loop remaining: {remaining}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n          <span class="token keyword">if</span> remaining <span class="token operator">==</span> <span class="token number">9</span> <span class="token punctuation">{</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n\n          <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>\n            <span class="token keyword">break</span> <span class="token lifetime-annotation symbol">&#39;Outer_loop</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n\n          remaining <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of counter: {counter}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从循环来看，外层有个循环 <code>Outer_loop</code> ，内层有个循环。</p><p>观察两个循环的结束条件，可以看出 <code>Outer_loop</code> 标签从 0 数到 2，内层循环从 10 减到 9。</p><p>没有指定标签的 <code>break</code> 将退出内层循环，而有标签的 <code>break &#39;Outer_loop</code> 将退出外层循环。</p><p>输出以下结果：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token class-name">Outer</span> <span class="token keyword">loop</span> counter<span class="token punctuation">:</span> <span class="token number">0</span>\n<span class="token class-name">Inner</span> <span class="token keyword">loop</span> remaining<span class="token punctuation">:</span> <span class="token number">10</span>\n<span class="token class-name">Inner</span> <span class="token keyword">loop</span> remaining<span class="token punctuation">:</span> <span class="token number">9</span>\n<span class="token class-name">Outer</span> <span class="token keyword">loop</span> counter<span class="token punctuation">:</span> <span class="token number">1</span>\n<span class="token class-name">Inner</span> <span class="token keyword">loop</span> remaining<span class="token punctuation">:</span> <span class="token number">10</span>\n<span class="token class-name">Inner</span> <span class="token keyword">loop</span> remaining<span class="token punctuation">:</span> <span class="token number">9</span>\n<span class="token class-name">Outer</span> <span class="token keyword">loop</span> counter<span class="token punctuation">:</span> <span class="token number">2</span>\n<span class="token class-name">Inner</span> <span class="token keyword">loop</span> remaining<span class="token punctuation">:</span> <span class="token number">10</span>\n<span class="token class-name">The</span> value of counter<span class="token punctuation">:</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h4><p>Rust 内置了一个语言结构，它被称为 <code>while 循环</code></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token keyword">mut</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}!&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      number <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出以下结果：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token macro property">3!</span>\n<span class="token macro property">2!</span>\n<span class="token macro property">1!</span>\ndone\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h4><p><code>for</code> 常用来循环遍历集合，当然也可以使用 <code>while</code> 循环来遍历，但是会变得更慢，因为编译器增加了运行时代码对每次循环进行条件检查。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">for</span> item <span class="token keyword">in</span> a <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value in a is: {item}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 <code>range</code> 库中的 <code>rev</code> 函数来实现倒计时的效果：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token number">3</span>\n<span class="token number">2</span>\n<span class="token number">1</span>\ndone\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 18);
function _sfc_render(_ctx, _cache) {
  const _component_font = resolveComponent("font");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createBaseVNode("p", null, [
      createTextVNode("这个错误表明了 Rust 期望一个 "),
      _hoisted_22,
      createTextVNode(" 类型，却得到了一个整数。不像 JavaScript 一样，Rust 并不能自动地隐式地将非布尔值转换为布尔值，"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("必须显式地使用布尔值作为 if 表达式的条件")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_23,
    createBaseVNode("p", null, [
      _hoisted_26,
      createTextVNode(" 的"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("每个分支的返回值都必须是相同的类型")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("，否则编译器会报错。")
    ]),
    _hoisted_27,
    createBaseVNode("p", null, [
      createTextVNode("可以"),
      createVNode(_component_font, { color: "red" }, {
        default: withCtx(() => [
          createTextVNode("在一个循环上指定一个循环标签（loop label），然后将标签和 "),
          _hoisted_40,
          createTextVNode(" 、"),
          _hoisted_41,
          createTextVNode(" 一起使用，使得这些关键字应用于已经标记的循环，而不是最内层的循环")
        ]),
        _: 1
        /* STABLE */
      }),
      createTextVNode("。")
    ]),
    _hoisted_42
  ]);
}
const rustAnnotateControl_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "rust-annotate-control.html.vue"]]);
export {
  rustAnnotateControl_html as default
};
