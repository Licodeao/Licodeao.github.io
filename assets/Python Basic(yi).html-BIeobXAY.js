import { _ as _export_sfc, o as openBlock, c as createElementBlock, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="python中的输出函数" tabindex="-1"><a class="header-anchor" href="#python中的输出函数" aria-hidden="true">#</a> Python中的输出函数</h2><p><strong>print()函数</strong></p><ul><li>此函数可以直接使用</li><li>过程：向计算机发出指令，打印函数内的参数 -&gt; 把代码编译成计算机能听懂的语言 -&gt; 做出相应的执行，在控制台上输出结果</li></ul><p><strong>将数据输出到文件中</strong></p><ul><li><p>所指定的盘符要存在</p></li><li><p>使用file= 输出的文件对象</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;D:/text.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a+&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> a<span class="token operator">+</span>表示 如果文件不存在就创建，存在就在文件内容的后面继续追加\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span> fp<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 注意输出到的文件前面要用<span class="token builtin">file</span><span class="token operator">=</span>\nfp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 关闭文件流\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="标识符与保留字" tabindex="-1"><a class="header-anchor" href="#标识符与保留字" aria-hidden="true">#</a> 标识符与保留字</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">//</span> 查看关键字列表\n<span class="token keyword">import</span> keyword\n<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><ul><li><p>整数类型 -&gt; <code>int</code></p></li><li><p>浮点数类型 -&gt; <code>float</code></p><p><strong>浮点数存储不精确性</strong>：使用<strong>浮点数进行计算</strong>时，可能会出现<strong>小数位数不确定</strong>的情况</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n1 <span class="token operator">=</span> <span class="token number">1.1</span>\nn2 <span class="token operator">=</span> <span class="token number">2.2</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">3.300000000000000003</span>\n出现这种情况是因为 计算机采用二进制存储\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方案：<strong>导入模块decimal</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal\n<span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">&#39;1.1&#39;</span><span class="token punctuation">)</span><span class="token operator">+</span>Decimal<span class="token punctuation">(</span><span class="token string">&#39;2.2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">3.3</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>布尔类型 -&gt; <code>bool</code></p></li><li><p>字符串类型 -&gt; <code>str</code></p><p>称为不可变的字符序列</p><p>可以使用<strong>单引号、双引号、三引号</strong>来定义</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>str1 <span class="token operator">=</span> <span class="token string">&#39;pyhton1&#39;</span>\nstr2 <span class="token operator">=</span> <span class="token string">&quot;python2&quot;</span>\nstr3 <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;python3&#39;&#39;&#39;</span>\n	 <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;\n	 	python3\n	   &#39;&#39;&#39;</span>\n注意：\n	单引号和双引号定义的字符串必须在一行\n    三引号定义的字符串可以分布在连续的多行\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a> 数据类型转换</h2><table><thead><tr><th>函数名</th><th>作用</th><th>注意事项</th><th>例子</th></tr></thead><tbody><tr><td><code>str()</code></td><td>将其他数据类型<strong>转成字符串</strong></td><td>也可以<strong>用引号转换</strong></td><td><code>str(123) str(&#39;123&#39;)</code></td></tr><tr><td><code>int()</code></td><td>将其他数据类型<strong>转成整数</strong></td><td><strong>文字和小数类</strong>无法转化成整数</td><td><code>int(&#39;123&#39;) int(9.8)</code></td></tr><tr><td><code>float()</code></td><td>将其他数据类型<strong>转成浮点数</strong></td><td><strong>文字无法转换成整数</strong>、<strong>整数转换成浮点数，末尾为.0</strong></td><td><code>float(&#39;9.9&#39;) float(9)</code></td></tr></tbody></table><h2 id="python中的注释" tabindex="-1"><a class="header-anchor" href="#python中的注释" aria-hidden="true">#</a> python中的注释</h2><p>通常包括<strong>三种</strong>类型的注释：</p><ul><li><p>单行注释 -&gt; 以 &#39;#&#39; 开头，直到换行结束</p></li><li><p>多行注释 -&gt; 将一对<strong>三引号之间的代码</strong>称为多行注释</p></li><li><p>中文编码声明注释 -&gt; 在文件开头加上<strong>中文声明注释</strong>，用以<strong>指定源码文件的编码格式</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># coding: gbk -&gt; 中文编码声明注释</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="输入函数" tabindex="-1"><a class="header-anchor" href="#输入函数" aria-hidden="true">#</a> 输入函数</h2><p>输入函数 -&gt; <strong>input()</strong>，<strong>返回值是<code>str</code>类型</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>answer <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;你想要啥?&#39;</span><span class="token punctuation">)</span>\n钱 <span class="token operator">-</span><span class="token operator">&gt;</span> 此时控制台就会输出‘钱’，类似于Java中的String<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 加法运算</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 减法运算</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 乘法运算</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 除法运算</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 整除运算</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 取余运算</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 幂运算</span>\n<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>\n取余运算 <span class="token operator">-</span><span class="token operator">&gt;</span> 一正一负要遵循 余数<span class="token operator">=</span>被除数<span class="token operator">-</span>除数<span class="token operator">*</span>商<span class="token punctuation">(</span>这里的商向下取整，变相印证了整除运算<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">9</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">9</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>\n	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">17</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">17</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token operator">/</span><span class="token operator">-</span><span class="token number">5</span>且向下取整<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span>，控制台验证正确\n整除运算 <span class="token operator">-</span><span class="token operator">&gt;</span> 一正一负，向下取整 <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">9</span> <span class="token operator">//</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.</span>几，向下取整 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><ul><li>执行顺序： 右 -&gt; 左</li><li>支持链式赋值：a = b = c = 20</li><li>支持参数赋值：+=、-=、*=、/=、//=、%=</li><li>支持系列解包赋值：a,b,c = 20,30,40</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 报错，因为左右变量的个数和值的个数不对应\n\n交换值\na<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span>\na<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token number">20</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><p>对变量或表达式的结果进行大小、真假等比较</p><blockquote><p>值得注意的是</p><p>== -&gt; 对象value(值)的比较</p><p>is, is not -&gt; 对象的id(标识)的比较</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">10</span>\nb <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment">#True -&gt; 说明a与b的值相等</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span> <span class="token comment">#True -&gt; 说明a与b的标识相等</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![](https://typora-licodeao.oss-cn-guangzhou.aliyuncs.com/typoraImg/屏幕截图 2022-08-01 211909.jpg)</p><h3 id="布尔运算符" tabindex="-1"><a class="header-anchor" href="#布尔运算符" aria-hidden="true">#</a> 布尔运算符</h3><ul><li>and -&gt; 两个运算数都为True，结果才为True</li><li>or -&gt; 只要有一个运算数为True，结果就为True</li><li>not -&gt; 取反</li><li>in -&gt; 查看某个字符在不在字符串内，在为true</li><li>not in -&gt; 查看某个字符在不在字符串内，不在为false</li></ul><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h3><p>将<strong>数据转成二进制</strong>进行计算</p><ul><li><p><strong>按位与 &amp;</strong> -&gt; 对应数位都是1，结果才是1，否则为0</p></li><li><p><strong>按位或 |</strong> -&gt; 对应数位都是0，结果才是0，否则为1</p></li><li><p><strong>左移位</strong>运算符 <strong>&lt;&lt;</strong> -&gt; <strong>高位溢出舍弃</strong>，<strong>低位补0</strong>（<strong>左移可以看成向高位数走</strong>，所以高位溢出舍弃）</p><p><strong>左移一位</strong>(向高位走)，相当于<strong>乘以2</strong></p></li><li><p><strong>右移位</strong>运算符 <strong>&gt;&gt;</strong> -&gt; <strong>低位溢出舍弃</strong>，<strong>高位补0</strong>（<strong>右移可以看成向低位数走</strong>，所以低位溢出舍弃）</p></li></ul><p>​ <strong>右移一位</strong>(向低位走)，相当于<strong>除以2</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#向左移动1位 -&gt; 8</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#向右移动1位 -&gt; 2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运算符的优先级" tabindex="-1"><a class="header-anchor" href="#运算符的优先级" aria-hidden="true">#</a> 运算符的优先级</h3><ol><li>先乘除后加减，有幂运算先算幂运算</li><li>位运算</li><li>比较运算符</li><li>布尔运算</li><li>赋值运算</li></ol><h2 id="对象的布尔值" tabindex="-1"><a class="header-anchor" href="#对象的布尔值" aria-hidden="true">#</a> 对象的布尔值</h2><blockquote><p>Python一切皆对象，所有对象都有一个布尔值</p><p>获取对象的布尔值 -&gt; 使用内置函数<code>bool()</code></p></blockquote><p>以下对象的布尔值为false(<strong>类似JavaScript中的五大假值</strong>)，除此外其余布尔值都为true</p><ul><li>False</li><li>数值0</li><li>None</li><li>空字符串</li><li>空列表</li><li>空元组</li><li>空字典</li><li>空集合</li></ul><h2 id="多分支结构" tabindex="-1"><a class="header-anchor" href="#多分支结构" aria-hidden="true">#</a> 多分支结构</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>score <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;输入成绩:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">#多分支结构</span>\n<span class="token keyword">if</span> score <span class="token operator">&gt;=</span> <span class="token number">90</span> <span class="token keyword">and</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;优秀&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token keyword">and</span> score <span class="token operator">&lt;=</span> <span class="token number">89</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;良好&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;不及格&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pass语句" tabindex="-1"><a class="header-anchor" href="#pass语句" aria-hidden="true">#</a> pass语句</h2><blockquote><p>pass语句什么都不做，<strong>只是一个占位符</strong>，用在语法上需要语句的地方</p><p>作用：搭建语法结构</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#判断是否是会员</span>\n<span class="token keyword">if</span> answer <span class="token operator">==</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span>\n    <span class="token keyword">pass</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token keyword">pass</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="range-函数" tabindex="-1"><a class="header-anchor" href="#range-函数" aria-hidden="true">#</a> range()函数</h2><ul><li><p>用于生成一个整数序列</p></li><li><p><strong>创建range对象</strong>的三种方式</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">1.</span><span class="token builtin">range</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 创建一个<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>stop<span class="token punctuation">)</span>之间的整数序列，步长为<span class="token number">1</span>\n<span class="token number">2.</span><span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>stop<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 创建一个<span class="token punctuation">[</span>start<span class="token punctuation">,</span>stop<span class="token punctuation">)</span>之间的整数序列，步长为<span class="token number">1</span>\n<span class="token number">3.</span><span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>stop<span class="token punctuation">,</span>step<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> 创建一个<span class="token punctuation">[</span>start<span class="token punctuation">,</span>stop<span class="token punctuation">)</span>之间的整数序列<span class="token punctuation">,</span>步长为step\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>返回值是一个<strong>迭代器对象</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>r <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">#输出 range(0,10),数值范围为[0,10)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#输出 [0,1,2,3,4,5,6,7,8,9], list(range对象)用于查看range对象中的整数序列</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>所有range对象占用的内存空间都是相同的</strong>，只有当用到range对象时，才会去计算序列中的相关元素</p></li><li><p>in与not in 判断<strong>整数序列是否存在(不存在)指定的整数</strong></p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">)</span> <span class="token comment">#True</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token keyword">in</span> r<span class="token punctuation">)</span> <span class="token comment">#Flase</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构" aria-hidden="true">#</a> 循环结构</h2><ul><li>while(<strong>判断N+1次，条件为True执行N次</strong>)</li><li>for - in</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> 自定义变量 <span class="token keyword">in</span> 可迭代对象<span class="token punctuation">:</span>\n    循环体\n    \n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token comment"># 输出 P y t h o n</span>\n\n<span class="token comment"># 如果在循环体中不需要使用到自定义变量，可将自定义变量写为&#39;_&#39;</span>\n<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">)</span>\n<span class="token comment"># 输出 python*5</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 51);
const _hoisted_52 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_52);
}
const Python_Basic_yi__html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "Python Basic(yi).html.vue"]]);
export {
  Python_Basic_yi__html as default
};
