import { _ as _export_sfc, o as openBlock, c as createElementBlock, f as createStaticVNode } from "./app-5wU-U7Lk.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="前瞻" tabindex="-1"><a class="header-anchor" href="#前瞻" aria-hidden="true">#</a> 前瞻</h2><p>TypeScript 中有许多内置工具，它们每个都可以帮助我们进行类型体操的练习，实际上，工具本身的实现也是一种类型体操。</p><h2 id="常见的内置工具" tabindex="-1"><a class="header-anchor" href="#常见的内置工具" aria-hidden="true">#</a> 常见的内置工具</h2><h3 id="partial" tabindex="-1"><a class="header-anchor" href="#partial" aria-hidden="true">#</a> Partial</h3><blockquote><p><strong>Partial&lt; Type &gt;</strong></p><p>用于构造一个 Type，其<strong>所有属性都设置为可选类型</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IPartial</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">IPartialOptional</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>IPartial<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现Partial原理</span>\n<span class="token keyword">type</span> <span class="token class-name">LiPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">IPartialOptional</span> <span class="token operator">=</span> LiPartial<span class="token operator">&lt;</span>IPartial<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="required" tabindex="-1"><a class="header-anchor" href="#required" aria-hidden="true">#</a> Required</h3><blockquote><p><strong>Required&lt; Type &gt;</strong></p><p>用于构造一个 Type，其<strong>所有属性都设置为必填类型，与 Partial&lt; T &gt;相反</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IRequired</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">customRequired</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>IRequired<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现Required原理</span>\n<span class="token keyword">type</span> <span class="token class-name">LiRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customRequired</span> <span class="token operator">=</span> LiRequired<span class="token operator">&lt;</span>IRequired<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="readonly" tabindex="-1"><a class="header-anchor" href="#readonly" aria-hidden="true">#</a> Readonly</h3><blockquote><p><strong>Readonly&lt; Type &gt;</strong></p><p>用于构造一个 Type，其<strong>所有属性都设置为只读类型，意味着这个类型的所有属性全都不可以重新赋值</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IReadonly</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">customReadonly</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>IReadonly<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现Readonly原理</span>\n<span class="token keyword">type</span> <span class="token class-name">LiReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customReadonly</span> <span class="token operator">=</span> LiReadonly<span class="token operator">&lt;</span>IReadonly<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="record" tabindex="-1"><a class="header-anchor" href="#record" aria-hidden="true">#</a> Record</h3><blockquote><p><strong>Record&lt;Keys, Type&gt;</strong></p><p>用于<strong>构造一个对象类型，它所有的 key 都是 Keys 类型，所有的 value 都是 Type 类型</strong></p><p>注意：<strong>keyof any =&gt; string | number | symbol</strong></p><p><strong>Keys 一般都为联合类型</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IRecord</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;B&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customRecord</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>Keys<span class="token punctuation">,</span> IRecord<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现Record原理</span>\n<span class="token comment">// keyof any =&gt; string | number | symbol</span>\n<span class="token keyword">type</span> <span class="token class-name">LiRecord<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;B&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customRecord</span> <span class="token operator">=</span> LiRecord<span class="token operator">&lt;</span>Keys<span class="token punctuation">,</span> IRecord<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pick" tabindex="-1"><a class="header-anchor" href="#pick" aria-hidden="true">#</a> Pick</h3><blockquote><p><strong>Pick&lt;Type, Keys&gt;</strong></p><p>用于构造一个类型，<strong>它是从 Type 类型中挑了一些属性 Keys 组成的</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IPick</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">customPick</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>IPick<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;height&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现Pick原理</span>\n<span class="token keyword">type</span> <span class="token class-name">LiPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customPick</span> <span class="token operator">=</span> LiPick<span class="token operator">&lt;</span>IPick<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;height&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="omit" tabindex="-1"><a class="header-anchor" href="#omit" aria-hidden="true">#</a> Omit</h3><blockquote><p><strong>Omit&lt;Type, Keys&gt;</strong></p><p>用于构造一个类型，<strong>它是从 Type 类型中过滤了一些属性 Keys</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IOmit</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">customOmit</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>IOmit<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;height&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现Omit原理</span>\n<span class="token keyword">type</span> <span class="token class-name">LiOmit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// P in keyof T =&gt; 属于遍历原来对象中的key =&gt; 即IOmit中的key</span>\n  <span class="token comment">// P extends K =&gt; 属于遍历传入的key =&gt; 即&quot;name&quot; | &quot;height&quot;</span>\n  <span class="token comment">// 二者取交集 =&gt; 删除</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customOmit</span> <span class="token operator">=</span> LiOmit<span class="token operator">&lt;</span>IOmit<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;height&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exclude" tabindex="-1"><a class="header-anchor" href="#exclude" aria-hidden="true">#</a> Exclude</h3><blockquote><p><strong>Exclude&lt;UnionType, ExcludeMembers&gt;</strong></p><p>用于构造一个类型，<strong>它是从 UnionType 联合类型里面排除了 ExcludeMembers 的类型</strong></p><p><strong>Exclude 的实现涉及到了分发条件类型（传入的类型是个联合类型）</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 传入的是一个联合类型</span>\n<span class="token keyword">type</span> <span class="token class-name">words</span> <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;B&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customExclude</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span>words<span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现Exclude原理</span>\n<span class="token keyword">type</span> <span class="token class-name">LiExclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">E</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customExclude</span> <span class="token operator">=</span> LiExclude<span class="token operator">&lt;</span>words<span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="extract" tabindex="-1"><a class="header-anchor" href="#extract" aria-hidden="true">#</a> Extract</h3><blockquote><p><strong>Extract&lt;Type, Union&gt;</strong></p><p>用于构造一个类型，<strong>它是从 Type 类型中提取了 Union 的类型</strong></p><p><strong>与 Exclude 相反</strong></p><p><strong>Extract 的实现依然涉及到了分发条件类型</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">words</span> <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;B&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customExtract</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span>words<span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现Extract原理</span>\n<span class="token keyword">type</span> <span class="token class-name">LiExtract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customExtract</span> <span class="token operator">=</span> LiExtract<span class="token operator">&lt;</span>words<span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nonnullable" tabindex="-1"><a class="header-anchor" href="#nonnullable" aria-hidden="true">#</a> NonNullable</h3><blockquote><p><strong>NonNullable&lt; Type &gt;</strong></p><p>用于构造一个类型，<strong>这个类型从 Type 中排除了 null、undefined</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">example</span> <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;B&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;C&quot;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customNonNullable</span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span>example<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现NonNullable原理</span>\n<span class="token keyword">type</span> <span class="token class-name">LiNonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customNonNullable</span> <span class="token operator">=</span> LiNonNullable<span class="token operator">&lt;</span>example<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="returntype" tabindex="-1"><a class="header-anchor" href="#returntype" aria-hidden="true">#</a> ReturnType</h3><blockquote><p><strong>ReturnType&lt; Type &gt;</strong></p><p>用于构造一个<strong>获取函数的返回值的类型是 Type</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> num2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">customReturnType</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> sum<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现ReturnType原理</span>\n<span class="token comment">// 第一个extends是对传入的类型进行限制</span>\n<span class="token comment">// 第二个extends是为了进行条件获取类型</span>\n<span class="token keyword">type</span> <span class="token class-name">LiReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>\n  <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span>\n  <span class="token operator">?</span> <span class="token constant">R</span>\n  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">customReturnType</span> <span class="token operator">=</span> LiReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> sum<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instancetype" tabindex="-1"><a class="header-anchor" href="#instancetype" aria-hidden="true">#</a> InstanceType</h3><blockquote><p><strong>InstanceType&lt; Type &gt;</strong></p><p><strong>用于构造一个由所有 Type 的构造函数的实例类型组成的类型</strong></p><p><strong>typeof class =&gt; 构造函数具体的类型</strong></p><p><strong>InstanceType =&gt; 构造函数创建出来的实例对应的类型</strong></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// typeof class =&gt; 构造函数具体的类型</span>\n<span class="token comment">// InstanceType =&gt; 构造函数创建出来的实例对应的类型</span>\n<span class="token keyword">type</span> <span class="token class-name">LiPerson</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Person<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> p<span class="token operator">:</span> LiPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// example</span>\n<span class="token comment">// 帮助我们创建某种类型的对象</span>\n<span class="token comment">// 这里函数的返回值的类型不可以写T，因为T的类型会是typeof Person</span>\n<span class="token comment">// 这里就可以使用InstanceType&lt;T&gt;，它可以帮助我们返回构造函数创建出来的实例对应的类型</span>\n<span class="token keyword">function</span> factory<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  ctor<span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 实现InstanceType原理</span>\n<span class="token keyword">type</span> <span class="token class-name">LiInstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span>\n  <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span>\n  <span class="token operator">?</span> <span class="token constant">R</span>\n  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">customInstanceType</span> <span class="token operator">=</span> LiInstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Person<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> factory<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  ctor<span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> LiInstanceType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> dog2 <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>TypeScript 中常见的内置工具的实现其实并不难，有些特别的知识点记住就行：</p><ul><li><strong>keyof any =&gt; string | number | symbol</strong></li><li><strong>typeof class =&gt; 构造函数具体的类型</strong></li><li><strong>InstanceType =&gt; 构造函数创建出来的实例对应的类型</strong></li></ul>', 39);
const _hoisted_40 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _hoisted_40);
}
const TypeScriptTool_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "TypeScriptTool.html.vue"]]);
export {
  TypeScriptTool_html as default
};
